{
  "id": 70,
  "title": "deepseek-memory-document-store",
  "body": "import sqlite3\nfrom modules.db_migrations import ensure_ai_memory_table\n\nclass DocumentStore:\n    def __init__(self, db_path):\n        self.conn = sqlite3.connect(db_path)\n        self.conn.row_factory = sqlite3.Row\n        self.create_table()\n        ensure_ai_memory_table(self.conn)\n        self.ensure_content_type_column()\n\n    def get_connection(self):\n        return self.conn\n\n    def ensure_content_type_column(self):\n        cur = self.conn.cursor()\n        cur.execute(\"PRAGMA table_info(documents)\")\n        cols = {row[1] for row in cur.fetchall()}\n        if \"content_type\" not in cols:\n            self.conn.execute(\"ALTER TABLE documents ADD COLUMN content_type TEXT DEFAULT 'text/plain'\")\n            self.conn.commit()\n\n    def create_table(self):\n        self.conn.execute(\n            \"CREATE TABLE IF NOT EXISTS documents (id INTEGER PRIMARY KEY, title TEXT, body TEXT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)\"\n        )\n        self.conn.commit()\n\n    def add_document(self, title, body):\n        cur = self.conn.execute(\n            \"INSERT INTO documents (title, body) VALUES (?, ?)\", \n            (title, body)\n        )\n        self.conn.commit()\n        return cur.lastrowid\n\n    def update_document(self, doc_id: int, new_body: str):\n        self.conn.execute(\n            \"UPDATE documents SET body = ? WHERE id = ?\",\n            (new_body, doc_id)\n        )\n        self.conn.commit()\n\n    def append_to_document(self, doc_id: int, extra_text: str):\n        row = self.get_document(doc_id)\n        if not row:\n            raise ValueError(f\"No document with id {doc_id}\")\n\n        current_body = row[\"body\"] if isinstance(row, dict) else row[2]\n        if current_body is None:\n            current_body = \"\"\n\n        new_body = current_body + \"\\n\" + extra_text\n        self.update_document(doc_id, new_body)\n\n    def get_document_index(self):\n        cur = self.conn.execute(\n            \"SELECT id, title, body FROM documents ORDER BY id DESC\"\n        )\n        result = []\n        for row in cur.fetchall():\n            body = row[\"body\"]\n            if body is None:\n                body = \"\"\n            if isinstance(body, bytes):\n                desc = f\"[{len(body)} bytes]\"\n            else:\n                desc = body[:60].replace(\"\\n\", \" \").replace(\"\\r\", \" \")\n            result.append({\"id\": row[\"id\"], \"title\": row[\"title\"], \"description\": desc})\n        return result\n\n    def get_document(self, doc_id):\n        cur = self.conn.execute(\"SELECT id, title, body FROM documents WHERE id=?\", (doc_id,))\n        return cur.fetchone()\n\n    def delete_document(self, doc_id: int):\n        self.conn.execute(\n            \"DELETE FROM documents WHERE id = ?\",\n            (doc_id,)\n        )\n        self.conn.commit()\n\n    # AI Memory Methods\n    def add_memory(self, role: str, content: str) -> int:\n        \"\"\"Add a new memory entry to the AI memory table\"\"\"\n        cur = self.conn.execute(\n            \"INSERT INTO ai_memory (role, content) VALUES (?, ?)\",\n            (role, content)\n        )\n        self.conn.commit()\n        return cur.lastrowid\n\n    def get_recent_memories(self, limit: int = 10, role: str = None) -> list:\n        \"\"\"\n        Retrieve recent memories with optional role filtering\n        Returns list of sqlite3.Row objects with id, role, content, timestamp\n        \"\"\"\n        query = \"SELECT * FROM ai_memory\"\n        params = []\n        \n        if role:\n            query += \" WHERE role = ?\"\n            params.append(role)\n            \n        query += \" ORDER BY timestamp DESC LIMIT ?\"\n        params.append(limit)\n        \n        cur = self.conn.execute(query, tuple(params))\n        return cur.fetchall()\n\n    def clear_memories(self):\n        \"\"\"Delete all entries from the AI memory table\"\"\"\n        self.conn.execute(\"DELETE FROM ai_memory\")\n        self.conn.commit()\n\n    def delete_memory(self, memory_id: int):\n        \"\"\"Delete a specific memory by its ID\"\"\"\n        self.conn.execute(\n            \"DELETE FROM ai_memory WHERE id = ?\",\n            (memory_id,)\n        )\n        self.conn.commit()\n"
}