{
  "id": 146,
  "title": "test_hyperlink_renderer",
  "body": "# test_hyperlink_renderer.py\nimport tkinter as tk\nfrom tkinter import messagebox\nfrom modules.hyperlink_renderer import render_links\n\nDEMO_TEXT = \"\"\"Welcome to the FunKit link demo.\n\nThis is plain text. Below are some embedded links in the format [Label](doc:ID).\n\n- Open the [Intro Doc](doc:1) to see a sample.\n- Jump to the [API Reference](doc:42) for advanced knobs.\n- Non-doc links like [OpenAI](https://openai.com) are ignored by this renderer.\n\nYou can edit this text and re-run render_links(...) to refresh the link tagging.\n\"\"\"\n\ndef on_open_doc(doc_id: int):\n    # Replace with your app's open logic\n    print(f\"[demo] open doc id: {doc_id}\")\n    try:\n        messagebox.showinfo(\"Link Clicked\", f\"You clicked a link for doc:{doc_id}\")\n    except Exception:\n        pass\n\ndef main():\n    root = tk.Tk()\n    root.title(\"Hyperlink Renderer Demo\")\n\n    # Optional: tweak link appearance via env vars before import\n    # os.environ[\"PIKIT_LINK_COLOR\"] = \"#0a84ff\"\n    # os.environ[\"PIKIT_LINK_UNDERLINE\"] = \"1\"  # or \"0\"\n\n    text = tk.Text(root, wrap=\"word\", font=(\"Segoe UI\", 11))\n    text.pack(fill=\"both\", expand=True)\n\n    # Populate text and render links\n    text.insert(\"1.0\", DEMO_TEXT)\n    render_links(text, on_open_doc)\n\n    # Simple toolbar to re-render after edits\n    toolbar = tk.Frame(root)\n    toolbar.pack(side=\"bottom\", fill=\"x\")\n    tk.Button(toolbar, text=\"Re-Parse Links\", command=lambda: render_links(text, on_open_doc)).pack(side=\"right\", padx=6, pady=6)\n\n    root.mainloop()\n\nif __name__ == \"__main__\":\n    main()\n"
}