{
  "id": 71,
  "title": "deepseek-memory_dialog",
  "body": "class MemoryEditor:\n    def __init__(self, app):\n        self.app = app\n        self.win = tk.Toplevel(app)\n        self.win.title(\"AI Memory\")\n        self.win.geometry(\"840x640\")\n        \n        # Initialize presets and widgets\n        self._setup_widgets()\n        self._load_memory()\n        \n    def _setup_widgets(self):\n        # Scope toggle\n        mode_frame = ttk.Frame(self.win)\n        mode_frame.pack(fill=\"x\", padx=10, pady=10)\n        ttk.Label(mode_frame, text=\"Scope:\").pack(side=\"left\")\n        self.mode_var = tk.StringVar(value=\"global\")\n        ttk.Radiobutton(mode_frame, text=\"Global\", variable=self.mode_var, value=\"global\").pack(side=\"left\", padx=5)\n        doc_id = self.app.current_doc_id\n        ttk.Radiobutton(mode_frame, text=f\"Doc {doc_id}\" if doc_id else \"Doc\", \n                        variable=self.mode_var, value=\"doc\", state=\"normal\" if doc_id else \"disabled\").pack(side=\"left\", padx=5)\n\n        # Action buttons\n        btn_frame = ttk.Frame(self.win)\n        btn_frame.pack(fill=\"x\", padx=10, pady=5)\n        ttk.Button(btn_frame, text=\"Load\", command=self._load_memory).pack(side=\"left\")\n        ttk.Button(btn_frame, text=\"Save\", command=self._save_memory).pack(side=\"left\", padx=5)\n        ttk.Button(btn_frame, text=\"Clear\", command=self._clear_memory).pack(side=\"left\")\n        \n        # Presets menu\n        preset_menu = ttk.Menubutton(btn_frame, text=\"Presets\")\n        preset_menu.pack(side=\"left\", padx=10)\n        menu = tk.Menu(preset_menu, tearoff=0)\n        for name in PRESETS:\n            menu.add_command(label=name, command=lambda n=name: self._apply_preset(n))\n        preset_menu.config(menu=menu)\n\n        # JSON sanitizer toggle\n        self.sanitize_var = tk.BooleanVar(value=False)\n        ttk.Checkbutton(btn_frame, text=\"Sanitize JSON\", variable=self.sanitize_var).pack(side=\"right\")\n        \n        # Preview/Copy buttons\n        ttk.Button(btn_frame, text=\"Preview \u2192 Model Text\", command=self._preview_model_text).pack(side=\"right\", padx=5)\n        ttk.Button(btn_frame, text=\"Copy \u2192 Model Text\", command=self._copy_model_text).pack(side=\"right\")\n\n        # JSON editor\n        editor_frame = ttk.Frame(self.win)\n        editor_frame.pack(fill=\"both\", expand=True, padx=10, pady=5)\n        scroll_y = ttk.Scrollbar(editor_frame)\n        scroll_x = ttk.Scrollbar(editor_frame, orient=\"horizontal\")\n        self.editor = tk.Text(editor_frame, wrap=\"none\", font=(\"TkFixedFont\", 10))\n        self.editor.config(yscrollcommand=scroll_y.set, xscrollcommand=scroll_x.set)\n        scroll_y.config(command=self.editor.yview)\n        scroll_x.config(command=self.editor.xview)\n        self.editor.grid(row=0, column=0, sticky=\"nsew\")\n        scroll_y.grid(row=0, column=1, sticky=\"ns\")\n        scroll_x.grid(row=1, column=0, sticky=\"ew\")\n        editor_frame.rowconfigure(0, weight=1)\n        editor_frame.columnconfigure(0, weight=1)\n\n        # Status bar\n        self.status_var = tk.StringVar()\n        ttk.Label(self.win, textvariable=self.status_var).pack(fill=\"x\", padx=10, pady=5)\n\n    def _get_current_key(self):\n        return f\"doc:{self.app.current_doc_id}\" if self.mode_var.get() == \"doc\" else \"global\"\n\n    def _load_memory(self):\n        conn = _get_conn(self.app)\n        key = self._get_current_key()\n        try:\n            memory = get_memory(conn, key) or {}\n            self.editor.delete(\"1.0\", \"end\")\n            self.editor.insert(\"1.0\", json.dumps(memory, indent=2, ensure_ascii=False))\n            self.status_var.set(f\"Loaded: {key}\")\n        except Exception as e:\n            messagebox.showerror(\"Error\", f\"Failed to load memory: {str(e)}\")\n\n    def _save_memory(self):\n        conn = _get_conn(self.app)\n        key = self._get_current_key()\n        try:\n            data = json.loads(self.editor.get(\"1.0\", \"end\"))\n            set_memory(conn, data, key)\n            self.status_var.set(f\"Saved: {key}\")\n        except Exception as e:\n            messagebox.showerror(\"Error\", f\"Invalid JSON: {str(e)}\")\n\n    def _clear_memory(self):\n        if messagebox.askyesno(\"Confirm\", \"Clear memory?\"):\n            self.editor.delete(\"1.0\", \"end\")\n            self.editor.insert(\"1.0\", \"{}\")\n            self.status_var.set(\"Memory cleared\")\n\n    def _apply_preset(self, name):\n        self.editor.delete(\"1.0\", \"end\")\n        self.editor.insert(\"1.0\", json.dumps(PRESETS[name], indent=2))\n        self.status_var.set(f\"Applied preset: {name}\")\n\n    def _get_model_text(self):\n        try:\n            data = json.loads(self.editor.get(\"1.0\", \"end\"))\n            if self.sanitize_var.get():\n                return sanitize_json_to_plain(data, get_funkit_sanitize_options())\n            return json.dumps(data, indent=2)\n        except Exception:\n            return \"\"\n\n    def _preview_model_text(self):\n        text = self._get_model_text()\n        if not text: return\n        preview = tk.Toplevel()\n        preview.title(\"Model Text Preview\")\n        text_widget = tk.Text(preview, wrap=\"none\", font=(\"TkFixedFont\", 10))\n        text_widget.insert(\"1.0\", text)\n        text_widget.config(state=\"disabled\")\n        text_widget.pack(fill=\"both\", expand=True)\n\n    def _copy_model_text(self):\n        text = self._get_model_text()\n        if text:\n            self.win.clipboard_clear()\n            self.win.clipboard_append(text)\n            self.status_var.set(\"Copied to clipboard\")\n\n# Integration point\ndef open_memory_dialog(app):\n    MemoryEditor(app)\n"
}