{
  "id": 61,
  "title": "commit_opml-broken",
  "body": "#!/usr/bin/env bash\n# Commit + tag + push with upstream auto-setup.\n# Usage: bash commit_opml.sh\n# Tip: chmod +x commit_opml.sh && ./commit_opml.sh\n\nset -euo pipefail\n\n# ---- Config ---------------------------------------------------------------\nDEFAULT_TAG_PREFIX=\"opml_baseline\"\nFILES_TO_ADD=()   # empty means \"git add -A\" (everything). Put paths here to restrict.\n# --------------------------------------------------------------------------\n\n# Ensure we are inside a git repo\ngit rev-parse --is-inside-work-tree > /dev/null 2>&1 || {\n  echo \"\u274c Not inside a git repository.\"\n  exit 1\n}\n\n# Figure out branch + remote\nBRANCH=\"$(git rev-parse --abbrev-ref HEAD)\"\nREMOTE_OK=true\nif ! git remote get-url origin >/dev/null 2>&1; then\n  REMOTE_OK=false\nfi\n\n# Stage changes\nif [ ${#FILES_TO_ADD[@]} -eq 0 ]; then\n  git add -A\nelse\n  git add \"${FILES_TO_ADD[@]}\"\nfi\n\n# If nothing staged, bail politely\nif git diff --cached --quiet; then\n  echo \"\u2139\ufe0f  No staged changes. Nothing to commit.\"\n  exit 0\nfi\n\n# Build commit message\nNOW_ISO=\"$(date -Iseconds)\"\nread -r -d '' COMMIT_MSG <<'EOF'\n\u2728 OPML Rendering & TreeView lineage milestone\n\n- Automatic OPML detection and rendering in the document pane.\n- Integrated OPML parsing directly into _render_document (BOM-safe).\n- Fixed geometry manager conflict (grid vs pack) in OPML view.\n- Restored toolbar handlers (e.g., _on_delete_clicked, _handle_image).\n- TreeView lineage displays correctly from green links.\n- OPML tree depth preference persists until changed by user.\n\nTagging this as the first stable OPML-capable build of FunKit.\nEOF\n\n# Append timestamp/footer to commit body (helps future archaeology)\nCOMMIT_MSG=\"$COMMIT_MSG\n\nCommitted at: $NOW_ISO\nBranch: $BRANCH\n\"\n\n# Commit\ngit commit -m \"$COMMIT_MSG\"\n\n# Create a unique tag (avoids collisions if rerun)\n# Format: opml_baseline_YYYYMMDD_HHMM (or bump a suffix if exists)\nTAG_BASE=\"${DEFAULT_TAG_PREFIX}_$(date +%Y%m%d_%H%M)\"\nTAG=\"$TAG_BASE\"\ni=2\nwhile git rev-parse -q --verify \"refs/tags/$TAG\" >/dev/null; do\n  TAG=\"${TAG_BASE}_$i\"\n  i=$((i+1))\ndone\n\ngit tag -a \"$TAG\" -m \"Snapshot: $TAG\"\n\n# Push (set upstream if needed)\nif $REMOTE_OK; then\n  if git rev-parse --abbrev-ref --symbolic-full-name @{u} >/dev/null 2>&1; then\n    # Upstream already set\n    git push\n  else\n    # First push for this branch\n    git push --set-upstream origin \"$BRANCH\"\n  fi\n\n  # Push tag\n  git push origin \"$TAG\"\n  echo \"\u2705 Pushed branch '$BRANCH' and tag '$TAG'.\"\nelse\n  echo \"\u26a0\ufe0f  No 'origin' remote configured. Your commit and tag are local:\"\n  echo \"    - Commit on branch: $BRANCH\"\n  echo \"    - Tag: $TAG\"\n  echo \"    To set a remote and push:\"\n  echo \"      git remote add origin <YOUR_REMOTE_URL>\"\n  echo \"      git push --set-upstream origin $BRANCH\"\n  echo \"      git push origin $TAG\"\nfi\n\n"
}