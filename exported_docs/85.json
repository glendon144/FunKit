{
  "id": 85,
  "title": "flask_reader",
  "body": "# modules/flask_server.py\nimport os\nimport sys\nimport json\nimport re\nimport base64\nimport mimetypes\nimport traceback\nfrom pathlib import Path\nfrom typing import Any, Dict, Iterable, List, Optional, Union\nfrom urllib.parse import urlencode, quote\n\nDATA_DIR = Path(__file__).parent.parent / \"exported_docs\"\nASSETS_DIR = DATA_DIR / \"assets\"  # optional: holds *.b64 files\n\n# -------------------- utils --------------------\n\ndef _s(val: Any, fallback: str = \"\") -> str:\n    if val is None:\n        return fallback\n    try:\n        if isinstance(val, (str, int, float, bool)):\n            return str(val)\n        if isinstance(val, (dict, list, tuple, set)):\n            return json.dumps(val, ensure_ascii=False)\n        if isinstance(val, bytes):\n            return f\"<{len(val)} bytes>\"\n        return str(val)\n    except Exception:\n        return fallback\n\ndef _load_json(path: Path) -> Optional[Union[dict, list]]:\n    try:\n        with path.open(encoding=\"utf-8\") as f:\n            return json.load(f)\n    except Exception as e:\n        print(f\"[flask_server] Skipping bad JSON: {path} ({e})\", file=sys.stderr)\n        return None\n\ndef _iter_docs() -> Iterable[Dict[str, Any]]:\n    if not DATA_DIR.exists():\n        return []\n    items: List[Dict[str, Any]] = []\n\n    docs_file = DATA_DIR / \"docs.json\"\n    if docs_file.exists():\n        root = _load_json(docs_file)\n        if isinstance(root, dict):\n            items.append(root)\n        elif isinstance(root, list):\n            items.extend([d for d in root if isinstance(d, dict)])\n\n    for file_path in sorted(DATA_DIR.glob(\"*.json\")):\n        if file_path.name == \"docs.json\":\n            continue\n        obj = _load_json(file_path)\n        if obj is None:\n            continue\n        doc_id = file_path.stem\n        if isinstance(obj, list):\n            doc = next((d for d in obj if _s(d.get(\"id\")) == doc_id), None)\n        elif isinstance(obj, dict):\n            doc = obj\n            doc.setdefault(\"id\", doc_id)\n        else:\n            doc = None\n        if isinstance(doc, dict):\n            items.append(doc)\n\n    return items\n\ndef _find_doc(doc_id: str) -> Optional[Dict[str, Any]]:\n    if not DATA_DIR.exists():\n        return None\n    fp = DATA_DIR / f\"{doc_id}.json\"\n    if fp.exists():\n        obj = _load_json(fp)\n        if isinstance(obj, dict):\n            obj.setdefault(\"id\", doc_id)\n            return obj\n        if isinstance(obj, list):\n            return next((d for d in obj if _s(d.get(\"id\")) == doc_id), None)\n    root = _load_json(DATA_DIR / \"docs.json\")\n    if isinstance(root, dict):\n        return root if _s(root.get(\"id\")) == doc_id else None\n    if isinstance(root, list):\n        return next((d for d in root if _s(d.get(\"id\")) == doc_id), None)\n    return None\n\ndef _is_image_dict(d: Dict[str, Any]) -> bool:\n    mime = _s(d.get(\"mime\"))\n    data_b64 = d.get(\"data_base64\")\n    file_ref = _s(d.get(\"file\"))\n    return mime.startswith(\"image/\") and (isinstance(data_b64, str) or file_ref.endswith(\".b64\"))\n\ndef _collect_images(doc: Dict[str, Any]) -> List[Dict[str, Any]]:\n    imgs: List[Dict[str, Any]] = []\n    def add_img(d: Dict[str, Any]):\n        if not isinstance(d, dict):\n            return\n        if _is_image_dict(d):\n            imgs.append({\n                \"mime\": _s(d.get(\"mime\"), \"image/png\"),\n                \"data_base64\": d.get(\"data_base64\"),\n                \"file\": _s(d.get(\"file\")),\n                \"alt\": _s(d.get(\"alt\")),\n                \"caption\": _s(d.get(\"caption\")),\n            })\n    if isinstance(doc.get(\"images\"), list):\n        for it in doc[\"images\"]:\n            add_img(it)\n    if isinstance(doc.get(\"attachments\"), list):\n        for it in doc[\"attachments\"]:\n            if isinstance(it, dict) and _s(it.get(\"kind\")) == \"image\":\n                add_img(it)\n    return imgs\n\ndef _data_uri_or_asset(img: Dict[str, Any]) -> Optional[str]:\n    mime = _s(img.get(\"mime\"), \"image/png\")\n    b64 = img.get(\"data_base64\")\n    file_ref = _s(img.get(\"file\"))\n    if isinstance(b64, str) and b64.strip():\n        return f\"data:{mime};base64,{b64}\"\n    if file_ref:\n        return f\"/asset/{file_ref}\"\n    return None\n\ndef _guess_mime_from_filename(name: str) -> str:\n    if name.lower().endswith(\".b64\"):\n        name = name[:-4]\n    mt, _ = mimetypes.guess_type(name)\n    return mt or \"application/octet-stream\"\n\ndef _smiley_data_uri() -> str:\n    svg = (\n        '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 64 64\">'\n        '<circle cx=\"32\" cy=\"32\" r=\"30\" fill=\"#f4f4f4\" stroke=\"#ddd\"/>'\n        '<circle cx=\"22\" cy=\"26\" r=\"4\" fill=\"#666\"/><circle cx=\"42\" cy=\"26\" r=\"4\" fill=\"#666\"/>'\n        '<path d=\"M20 40 q12 10 24 0\" stroke=\"#666\" stroke-width=\"3\" fill=\"none\" stroke-linecap=\"round\"/>'\n        '</svg>'\n    )\n    b64 = base64.b64encode(svg.encode(\"utf-8\")).decode(\"ascii\")\n    return f\"data:image/svg+xml;base64,{b64}\"\n\ndef _looks_like_html(text: str) -> bool:\n    # simple heuristic: presence of common HTML tags\n    return bool(re.search(r\"<(html|head|body|div|p|h\\d|ul|ol|li|span|article|section|img|a|table|pre)\\b\", text, re.I))\n\n# -------------------- app --------------------\n\ndef create_app():\n    try:\n        from flask import Flask, render_template_string, abort, Response, request\n    except ImportError:\n        print(\"Error: Flask is not installed. Run 'pip install flask'.\", file=sys.stderr)\n        sys.exit(1)\n\n    app = Flask(__name__)\n    app.config[\"TEMPLATES_AUTO_RELOAD\"] = True\n\n    @app.errorhandler(404)\n    def _e404(_e):\n        return (\n            \"\"\"<!doctype html><meta charset=\"utf-8\">\n            <title>Not found</title>\n            <h3>Not found</h3><p>The requested item was not found.</p>\n            <p><a href=\"/\">\u2190 Back to index</a></p>\"\"\",\n            404,\n            {\"Content-Type\": \"text/html; charset=utf-8\"},\n        )\n\n    @app.errorhandler(500)\n    def _e500(e):\n        print(\"[flask_server] 500:\", e, file=sys.stderr)\n        traceback.print_exc()\n        return (\n            \"\"\"<!doctype html><meta charset=\"utf-8\">\n            <title>Server error</title>\n            <h3>Internal Server Error</h3>\n            <p>Something went wrong rendering this page.</p>\n            <p><a href=\"/\">\u2190 Back to index</a></p>\"\"\",\n            500,\n            {\"Content-Type\": \"text/html; charset=utf-8\"},\n        )\n\n    @app.route(\"/health\")\n    def health():\n        exists = DATA_DIR.exists()\n        count = len(list(_iter_docs())) if exists else 0\n        assets = ASSETS_DIR.exists()\n        return {\"status\": \"ok\", \"exported_docs_exists\": exists, \"doc_count\": count, \"assets_exists\": assets}\n\n    @app.route(\"/\")\n    def index():\n        \"\"\"\n        Index with view modes:\n          ?view=auto   (default) \u2014 show thumbs only if doc has one (no placeholders; compact rows otherwise)\n          ?view=list              \u2014 never show thumbs (tight list)\n          ?view=gallery           \u2014 show thumbs; can enable placeholders via ?ph=smile\n        \"\"\"\n        view = (request.args.get(\"view\") or \"auto\").lower()\n        ph = (request.args.get(\"ph\") or \"\").lower()  # \"smile\" to show placeholder\n        show_placeholders = (view in (\"gallery\", \"auto\")) and (ph == \"smile\")\n\n        items = []\n        note = \"\" if DATA_DIR.exists() else f\"(Directory not found: {DATA_DIR})\"\n\n        for doc in _iter_docs():\n            try:\n                doc_id = _s(doc.get(\"id\")) or _s(abs(hash(_s(doc.get(\"title\")))) % (10**9))\n                title = _s(doc.get(\"title\", f\"Document {doc_id}\"))\n                raw_desc = doc.get(\"description\")\n                if raw_desc is None:\n                    raw_desc = doc.get(\"body\", \"\")\n                desc = _s(raw_desc).replace(\"\\n\", \" \")[:80]\n\n                thumb_src = None\n                has_image = False\n                imgs = _collect_images(doc)\n                if imgs:\n                    src = _data_uri_or_asset(imgs[0])\n                    if src:\n                        thumb_src = src\n                        has_image = True\n                if not has_image and view == \"gallery\" and show_placeholders:\n                    thumb_src = _smiley_data_uri()\n\n                items.append({\"id\": doc_id, \"title\": title, \"desc\": desc, \"thumb\": thumb_src, \"has_image\": has_image})\n            except Exception as e:\n                print(f\"[flask_server] Skipping bad doc on index: {e}\", file=sys.stderr)\n\n        def link_for(v):\n            q = {\"view\": v}\n            if ph:\n                q[\"ph\"] = ph\n            return \"/?\" + urlencode(q)\n\n        template = \"\"\"\n        <!doctype html>\n        <meta charset=\"utf-8\" />\n        <title>FunKit Documents</title>\n        <style>\n          body { font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; margin: 24px; }\n          .toolbar { margin-bottom: 12px; font-size: 0.95rem; }\n          .toolbar a { margin-right: 12px; }\n          ul.docs { list-style: none; padding: 0; margin: 0; }\n          li.doc { display: flex; align-items: center; gap: 12px; padding: 8px 0; border-bottom: 1px solid #eee; }\n          li.doc.compact { gap: 8px; padding: 4px 0; }\n          img.thumb { display: block; width: 64px; height: 64px; object-fit: cover; border-radius: 6px; background: #f2f2f2; }\n          .meta { line-height: 1.35; }\n          .title { font-weight: 600; }\n          .desc { color: #555; font-size: 0.92rem; }\n          code { background: #f5f5f5; padding: 2px 4px; border-radius: 4px; }\n          a { color: #198754; text-decoration: none; }  /* green links */\n          a:hover { text-decoration: underline; }\n        </style>\n\n        <h1>FunKit Documents</h1>\n        <div class=\"toolbar\">\n          View:\n          <a href=\"{{ link_auto }}\">Auto</a>\n          <a href=\"{{ link_list }}\">List</a>\n          <a href=\"{{ link_gallery }}\">Gallery</a>\n          {% if ph %}\n            | Placeholder: <strong>on</strong>\n          {% else %}\n            | <a href=\"/?{{ 'view=' + view + '&ph=smile' }}\">Enable placeholder</a>\n          {% endif %}\n        </div>\n        {% if note %}<p style=\"color:#a00;\">{{ note }}</p>{% endif %}\n\n        {% if items %}\n          <ul class=\"docs\">\n          {% for item in items %}\n            {% set use_thumb = (view == 'gallery') or (view == 'auto' and item.has_image) %}\n            <li class=\"doc {% if not use_thumb %}compact{% endif %}\">\n              {% if use_thumb and item.thumb %}\n                <a href=\"/doc/{{ item.id }}\"><img class=\"thumb\" src=\"{{ item.thumb }}\" alt=\"\"></a>\n              {% endif %}\n              <div class=\"meta\">\n                <div class=\"title\"><a href=\"/doc/{{ item.id }}\">{{ item.title }}</a></div>\n                <div class=\"desc\">{{ item.desc }}{% if item.desc %}\u2026{% endif %}</div>\n              </div>\n            </li>\n          {% endfor %}\n          </ul>\n        {% else %}\n          <p>No documents found in <code>{{ data_dir }}</code>.</p>\n        {% endif %}\n        \"\"\"\n        return render_template_string(\n            template,\n            items=items,\n            data_dir=str(DATA_DIR),\n            note=note,\n            view=view,\n            ph=ph,\n            link_auto=link_for(\"auto\"),\n            link_list=link_for(\"list\"),\n            link_gallery=link_for(\"gallery\"),\n        )\n\n    @app.route(\"/doc/<doc_id>\")\n    def show_doc(doc_id):\n        from flask import abort, render_template_string, request\n        doc = _find_doc(_s(doc_id))\n        if not doc:\n            abort(404)\n\n        title = _s(doc.get(\"title\", f\"Document {doc_id}\"))\n        body = _s(doc.get(\"body\", \"\"))\n\n        # Mode: auto (default) -> reader if looks like HTML, else code\n        mode = (request.args.get(\"mode\") or \"auto\").lower()\n        if mode == \"auto\":\n            mode = \"reader\" if _looks_like_html(body) else \"code\"\n        elif mode not in (\"reader\", \"code\"):\n            mode = \"code\"\n\n        # Convert internal [text](doc:123) links ONLY for reader mode\n        if mode == \"reader\":\n            try:\n                body_render = re.sub(r\"\\[(.+?)\\]\\(doc:(\\d+)\\)\", r'<a href=\"/doc/\\2\">\\1</a>', body)\n            except Exception:\n                body_render = _s(body)\n        else:\n            # code mode: keep literal text; no linkification\n            body_render = body\n\n        images = _collect_images(doc)\n        image_html_snippets: List[str] = []\n        for img in images:\n            try:\n                src = _data_uri_or_asset(img)\n                if not src:\n                    continue\n                alt = _s(img.get(\"alt\"))\n                caption = _s(img.get(\"caption\"))\n                snippet = f'''\n                  <figure class=\"img-figure\">\n                    <img src=\"{src}\" alt=\"{alt}\">\n                    {f\"<figcaption>{caption}</figcaption>\" if caption else \"\"}\n                  </figure>\n                '''\n                image_html_snippets.append(snippet)\n            except Exception as e:\n                print(f\"[flask_server] Bad image skipped: {e}\", file=sys.stderr)\n\n        host = request.host_url.rstrip(\"/\")\n        share_url = f\"{host}/doc/{quote(str(doc_id))}\"\n\n        # Links for the toggle toolbar\n        def mode_link(m: str) -> str:\n            return f\"/doc/{quote(str(doc_id))}?mode={m}\"\n\n        template = \"\"\"\n        <!doctype html>\n        <meta charset=\"utf-8\" />\n        <title>{{ title }} \u2014 FunKit Documents</title>\n        <style>\n          body { font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; margin: 24px; }\n          .content { max-width: 900px; }\n          .img-figure { margin: 16px 0; }\n          .img-figure img { max-width: 100%; height: auto; display: block; border-radius: 8px; }\n          .img-figure figcaption { color: #555; font-size: 0.9rem; margin-top: 6px; }\n          pre, code { background: #f7f7f7; padding: 10px 12px; border-radius: 6px; overflow-x: auto; font-family: monospace; font-size: 0.9rem; white-space: pre-wrap; }\n          a { color: #198754; text-decoration: none; }\n          a:hover { text-decoration: underline; }\n          .share { margin: 12px 0 20px; }\n          .share input { width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 6px; }\n          .share button { margin-top: 8px; padding: 6px 10px; border: 1px solid #198754; border-radius: 6px; background: #e9f7ef; color: #198754; cursor: pointer; }\n          .share button:hover { background: #d9f1e3; }\n          .viewtoggle { margin: 6px 0 14px; font-size: 0.95rem; }\n        </style>\n        <div class=\"content\">\n          <h2>{{ title }}</h2>\n\n          <div class=\"share\">\n            <label for=\"shareurl\"><strong>Share link</strong></label>\n            <input id=\"shareurl\" type=\"text\" readonly value=\"{{ share_url }}\">\n            <button onclick=\"copyShare()\">Copy link</button>\n            <span id=\"copied\" style=\"margin-left:8px;color:#198754;display:none;\">Copied!</span>\n          </div>\n\n          <div class=\"viewtoggle\">\n            View:\n            <a href=\"{{ link_code }}\">Code</a> |\n            <a href=\"{{ link_reader }}\">Reader</a> |\n            <a href=\"{{ link_auto }}\">Auto</a>\n            <small style=\"color:#777;\">(current: {{ mode }})</small>\n          </div>\n\n          {% if mode == 'reader' %}\n            <div>{{ body_render|safe }}</div>\n          {% else %}\n            <pre>{{ body_render }}</pre>\n          {% endif %}\n\n          {% if image_html_snippets %}\n            <hr>\n            <h3>Images</h3>\n            {% for snip in image_html_snippets %}\n              {{ snip|safe }}\n            {% endfor %}\n          {% endif %}\n          <p><a href=\"/\">\u2190 Back to index</a></p>\n        </div>\n        <script>\n          function copyShare() {\n            const inp = document.getElementById('shareurl');\n            inp.select(); inp.setSelectionRange(0, 99999);\n            try { document.execCommand('copy'); } catch(e) {}\n            if (navigator.clipboard) { navigator.clipboard.writeText(inp.value); }\n            const ok = document.getElementById('copied');\n            ok.style.display = 'inline';\n            setTimeout(() => ok.style.display = 'none', 1200);\n          }\n        </script>\n        \"\"\"\n        return render_template_string(\n            template,\n            title=title,\n            body_render=body_render,\n            image_html_snippets=image_html_snippets,\n            share_url=share_url,\n            mode=mode,\n            link_code=mode_link(\"code\"),\n            link_reader=mode_link(\"reader\"),\n            link_auto=mode_link(\"auto\"),\n        )\n\n    @app.route(\"/asset/<path:filename>\")\n    def serve_asset(filename: str):\n        from flask import abort, Response\n        if not ASSETS_DIR.exists():\n            abort(404)\n        file_path = (ASSETS_DIR / filename).resolve()\n        try:\n            file_path.relative_to(ASSETS_DIR)\n        except Exception:\n            abort(404)\n        if not file_path.exists() or not file_path.is_file():\n            abort(404)\n\n        try:\n            b64_data = file_path.read_text(encoding=\"utf-8\")\n            raw = base64.b64decode(b64_data, validate=True)\n        except Exception as e:\n            print(f\"[flask_server] Failed to decode asset {file_path}: {e}\", file=sys.stderr)\n            abort(404)\n\n        mime = _guess_mime_from_filename(file_path.name)\n        return Response(raw, mimetype=mime)\n\n    return app\n\n# -------------------- main --------------------\n\nif __name__ == \"__main__\":\n    debug = os.environ.get(\"FLASK_DEBUG\") == \"1\"\n    port = int(os.environ.get(\"PORT\", \"5050\"))\n    app = create_app()\n    app.run(host=\"127.0.0.1\", port=port, debug=debug)\n\n"
}