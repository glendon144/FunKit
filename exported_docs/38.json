{
  "id": 38,
  "title": "Why_Stable_Links_Matter",
  "body": "## 1.\u202fWhy \u201cstable, granular links\u201d matter \u2013 the promise in plain language  \n\nImagine you are writing a research paper, a product design spec, or a personal knowledge\u2011base.  You spend hours turning a paragraph into a *deep link* that you can hand to a teammate, paste into a chat, or embed in a web page.  In today\u2019s tools that link is fragile: if you later move the paragraph, the link points to the wrong place or breaks entirely.  Our **crisp promise** is therefore:\n\n> **\u201cYou can create a link that points to a precise block, line, or even a sentence, and that link will still land on the same logical piece of text after the document is edited.\u201d**\n\nThe only new term you need to keep straight is **deep link** \u2013 a URL that encodes not just the file name but also a *stable identifier* for a tiny piece of content (block, paragraph, or sentence).  All other jargon (e.g., *transclusion*, *lens*) will be introduced as we go.\n\n---\n\n## 2.\u202fConcrete MVP workflows \u2013 a step\u2011by\u2011step narrative  \n\n### 2.1\u202fCreate and share a deep link  \n\n1. **Open a Markdown file** called `Design\u2011Addressing.md`.  \n2. **Select the third paragraph** (the one that explains \u201cStability\u201d).  \n3. Press **\u2318\u202fL** (or **Ctrl\u202fL**) \u2013 the app generates a link that looks like  \n\n   ```\n   hs://my\u2011workspace/Design\u2011Addressing.md#b=3e2f1a9c\u2011c0d4\u20114a7b\u2011b8e1\u2011f5a2e3c9d0b1\n   ```\n\n   The `b=` part is a **block\u2011GUID** \u2013 a 128\u2011bit hash that is derived from the exact text of the paragraph *and* its surrounding outline, so the identifier is unique and reproducible.  \n\n4. **Copy** the link and **paste** it into a Slack message.  \n\nWhen a colleague clicks the link, the app opens `Design\u2011Addressing.md`, scrolls to the paragraph, and highlights it.  If later you move the paragraph to a different position, the same link still resolves because the block\u2011GUID is still present in the file\u2019s content.\n\n### 2.2\u202fView multiple \u201clenses\u201d of the same document  \n\nA *lens* is simply a different visual representation of the same underlying data.  In our MVP you can toggle three lenses:\n\n* **Full\u2011text view** \u2013 the raw Markdown with all formatting.  \n* **Outline view** \u2013 a collapsible tree that shows headings and the block\u2011GUIDs underneath.  \n* **Backlink view** \u2013 a list of every other document that contains a deep link pointing into the current file.\n\nAll three panes are synchronized: clicking a node in the outline automatically scrolls the full\u2011text view and updates the backlink pane.  This *multi\u2011view* pattern lets you navigate large knowledge bases without losing context.\n\n### 2.3\u202fTransclude a block (live\u2011embed)  \n\nSuppose you are writing a \u201cProject\u2011Roadmap.md\u201d and you want the *Stability* paragraph from `Design\u2011Addressing.md` to appear there, always up\u2011to\u2011date.  \n\n1. In `Project\u2011Roadmap.md` type `{{hs://my\u2011workspace/Design\u2011Addressing.md#b=3e2f1a9c\u2026}}`.  \n2. The editor renders the paragraph inline, but under the hood it stores a **transclusion reference** \u2013 a pointer to the source block\u2011GUID.  \n\nIf the source paragraph is edited (e.g., you add a sentence), the transcluded view updates instantly the next time you open the file.  No copy\u2011and\u2011paste is required, and you never have to worry about the source moving.\n\n---\n\n## 3.\u202fTechnical scaffolding \u2013 how we keep the binary tiny and fast  \n\n### 3.1\u202fCore language and libraries  \n\n* **Rust** \u2013 a systems language that guarantees memory safety without a garbage collector, producing static binaries under 50\u202fMiB.  \n* **Pulldown\u2011cmark** \u2013 a fast Markdown parser that yields a stream of *events* (e.g., \u201cStartParagraph\u201d, \u201cText\u201d).  \n* **SQLite** (via `rusqlite`) \u2013 an embedded relational store for the index of"
}