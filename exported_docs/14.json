{
  "id": 14,
  "title": "Hyperscope_python_module_dev_Plan",
  "body": "Great\u2014below is a practical expansion centered on an Engelbart-style core that is equally usable as middleware and as a Python library installable via pip. I\u2019ve focused on the parts that make it uniquely valuable to developers embedding it, while preserving an end-user app story.\n\n1) What \u201cmiddleware-capable\u201d means in practice\n- Design targets:\n  - Library-first core: a stable Rust API with C-ABI and Python bindings. Everything the GUI/CLI uses is available as embeddable APIs.\n  - No required daemon: all operations are synchronous or short-lived async jobs that can be driven by host apps.\n  - Stateless helpers + local workspace state: index lives in a workspace path; callers choose where it sits and when to update it.\n- Developer surfaces:\n  - Rust crate: hyperscope-core for native integrations.\n  - C-ABI shared library: libhyperscope for other languages (optional later).\n  - Python package: hyperscope (PyO3 + maturin), with typed stubs.\n  - JSON-RPC process plugin protocol for language-agnostic extensions.\n  - A tiny browser JS library for static exports to resolve and highlight anchors.\n\n2) Core data model and addressing (deeper)\n- Units:\n  - Document: a loaded resource with a stable doc_id (UUID or content hash plus path metadata).\n  - Block: paragraphs, headings, list items, code fence blocks; each has a block_guid stable across edits.\n  - Inline span: ranges inside a block, defined in normalized grapheme indices.\n  - Sentence: optional granular unit within a block for fine-grained links or annotations.\n- Address form (canonical):\n  - hs://workspace/doc-id#b=<BLOCK_GUID>&r=<start..end>&v=<view>\n  - start/end are grapheme offsets within normalized block text; r omitted means whole block.\n  - workspace can be a label resolved to a local path or a content store profile.\n- Web fallback:\n  - https://site/doc-slug#b=<BLOCK_GUID>&r=... with client JS to scroll/highlight; adds a visible \u201cOpen in Hyperscope\u201d action if app is installed.\n- Stability rules:\n  - Block_GUID derived from normalized text + structural lineage, not absolute line numbers.\n  - Block boundaries determined via content-defined chunking; edits that move blocks preserve GUIDs; splits/merges attempt GUID carryover with lineage hints.\n\n3) Stable ID generation (concrete)\n- Normalization:\n  - Unicode NFC; collapse runs of whitespace; trim leading/trailing; remove purely decorative markup; preserve semantic markers (heading level, list nesting).\n- Boundaries:\n  - Content-defined boundaries using rolling hash (Rabin-Karp or Gear) on normalized text with target window ~256 bytes for blocks; heuristics to keep headings and code fences as hard boundaries.\n- GUID derivation:\n  - blake3-128 of: normalized_block_text + parent_outline_path + block_kind + heading_path_hash.\n  - Store in index; optionally cache sidecar mapping for plaintext files (.hsids.json) to accelerate re-anchoring and allow round-trip without modifying files.\n- Sentence IDs:\n  - Optional; split via rule-based sentence boundary detection; sentence_guid = blake3-128 of sentence_text + block_guid.\n\n4) Re-anchoring algorithm (robustness details)\n- Inputs: a link with block_guid and optional r, plus a document version that may have changed.\n- Steps:\n  1) Direct hit: lookup block_guid in current index for doc; if present, return exact block; adjust range r to current normalized text via diff-aware mapping.\n  2) GUID miss fallback:\n     - Neighborhood index: use stored predecessor/successor block shingles or hashes; search the doc for the best-scoring window based on:\n       - Jaccard similarity over token shingles\n       - Sequence alignment score (Smith-Waterman or a trimmed diff-match-patch)\n       - Heading lineage similarity\n     - Tie-breakers: prefer same heading lineage depth; prefer minimal edit distance; prefer unchanged neighbors.\n  3) Range mapping:\n     - If original r exists, compute token-based anchors around r (prefix/suffix contexts of N tokens each) and remap onto new block text using approximate substring search; if fails, fallback to bounding sentence(s).\n  4) Confidence score:\n     - Return anchor with confidence in [0,1]; UIs can warn on low confidence; API can request strict-only resolution.\n- Performance:\n  - Maintain a per-doc inverted index of token shingles and a locality-sensitive hash to shortlist candidate blocks in O(log n) average.\n  - Aim 95% link survival on typical edit patterns; capture difficult cases via opt-in telemetry fuzzer.\n\n5) SQLite schema (initial)\n- docs(id, workspace_id, path, mtime, size, content_hash, title, format)\n- blocks(id, doc_id, ordinal, guid, kind, heading_level, parent_outline_path_hash, text_norm_hash, text_norm, byte_start, byte_end)\n- sentences(id, block_id, ordinal, guid, text_norm_hash, start, end)\n- backlinks(block_guid, target_doc_id, target_block_guid, relation, created_at)\n- tokens(doc_id, block_id, term, position) with indexes for shingle queries\n- links(source, target, r_start, r_end, created_at, metadata_json)\n- sidecars(doc_id, path, version, content_json)\n- meta(key, value)\n\n6) Python package design (pip)\n- Packaging:\n  - PyO3-based bindings; build with maturin; ship manylinux, macOS universal2, Windows wheels; include musl wheels for Alpine if feasible.\n  - Package name: hyperscope. Optional extras: hyperscope[watch], hyperscope[wasm] for dev.\n- Python API sketch:\n  - open_workspace(path) -> Workspace\n  - Workspace.import_folder(path, patterns=[\u201c**/*.md\u201d, \u201c**/*.html\u201d])\n  - Workspace.index(progress_cb=None)\n  - Workspace.resolve(link_str, strict=False) -> AnchorResult {doc_path, block_guid, range, confidence}\n  - Workspace.create_link(doc_path, position={block_guid|cursor}, range=None, view=None) -> hs:// URL\n  - Workspace.transclude(src_link, dst_doc_path, mode=\u201clive|snapshot\u201d) -> TransclusionHandle\n  - Workspace.backlinks(doc_path or block_guid) -> iterable of Link\n  - Workspace.export_static(out_dir, site_url, theme=\u201cdefault\u201d)\n  - Workspace.search(query, scope=\u201cblocks|sentences\u201d, k=50)\n  - Workspace.watch(callback) to get file updates and reindex; implemented with watchdog on Python side calling into core.\n- Embedding examples:\n  - Jupyter: magic function to copy deep link for a selected cell/line; render highlight in notebook output using the JS library.\n  - Sphinx/MkDocs: plugin that resolves hs:// links at build time, injecting anchors and \u201copen in app\u201d buttons.\n  - FastAPI/Django: service that resolves incoming hs URLs to HTML fragments; useful for internal portals.\n\n7) CLI/TUI concrete commands\n- hs-cli:\n  - hs init <workspace>\n  - hs import <folder> --patterns \u201c**/*.md,**/*.html\u201d\n  - hs index [--clean]\n  - hs link create <file> --block <guid>|--line <n> [--range a..b] [--view reader]\n  - hs link resolve \u201chs://\u2026\u201d [--strict] [--json]\n  - hs backlinks <file|guid> [--json]\n  - hs export <out_dir> --site-url https://\u2026\n  - hs migrate --input <path> --legacy-type augment|hyperscope-old --dry-run\n- hs-tui:\n  - Split view: outline | text | backlinks; key to copy deep link; search; jump to anchor.\n\n8) Tauri GUI expansion\n- Multi-view synchronization:\n  - Shared selection model bound to current anchor; clicking outline selects block; selecting text updates a draft deep link in UI.\n- Transclusion pane:\n  - Drop a link to show live transclusion; highlight changes when source updates; tooltip with confidence if re-anchored.\n- System integration:\n  - Register hs:// handler; paste into Slack/Docs opens app at exact anchor; if app not running, cold start target \u2264 500 ms.\n\n9) Static export details\n- HTML generation:\n  - Add id=\u201dhs-b-<BLOCK_GUID>\u201d to blocks; data attributes for sentence ids if enabled.\n  - Insert tiny script (~4\u20136 KB gzipped) that:\n    - Parses fragment b and r\n    - Locates block(s), highlights range using grapheme mapping\n    - Scrolls into view and adds a \u201cOpen in Hyperscope\u201d button using custom protocol hs:// or a bridge endpoint\n- Link rewriting:\n  - hs:// links rewritten to https fallback with original anchor params preserved; optional site-relative to keep portability.\n- SEO/permastability:\n  - Also emit hash-based legacy anchors for headings (#section-title) to keep normal navigation unaffected.\n\n10) Plugin protocol (JSON-RPC over stdio)\n- Handshake:\n  - initialize -> returns capabilities {importers, renderers, resolvers, commands}, plugin_name, version, required_features\n- Core calls:\n  - import_doc {uri, bytes, format_hint} -> {blocks[], metadata}\n  - render_block {block} -> {html_fragment}\n  - resolve_legacy_link {string} -> {hs_url}\n  - execute_command {name, args} -> {result}\n- Events:\n  - on_indexed {doc_id, stats}; on_transclusion_update {target, src_anchor}\n- Versioning and safety:\n  - JSON Schemas published and versioned; plugins declare min_core_version, feature flags.\n  - Capability manifest and working dir sandboxing; no network by default.\n\n11) Transclusion semantics (clear rules)\n- Modes:\n  - Live: reference resolves on view/render; always current; show \u201csource updated\u201d indicators if target drifted with confidence < threshold.\n  - Snapshot: stores resolved HTML or markdown with provenance metadata; can be re-synced on demand.\n- Cycle handling:\n  - Detect cycles via resolving graph; cutoff depth with a render note; users can override per transclusion.\n- Styling:\n  - Transcluded blocks carry a subtle border and source link; respect host doc theme.\n\n12) Performance implementation notes\n- Indexing:\n  - Streaming parsers (pulldown-cmark, html5ever) to avoid large allocations.\n  - Tokenization via unicode-segmentation and minimal stemming; BLAKE3 for fast hashing.\n- Query:\n  - SQLite prepared statements; indexes on guid, doc_id+ordinal, term postings; pragma tuning for WAL mode.\n- Re-anchoring:\n  - Fast shortlist via minhash or simhash buckets; only run expensive diff on top-k candidates.\n- Budgets (as given):\n  - Binary size and latency budgets enforced via CI perf tests.\n\n13) Security, privacy, reproducibility (developer emphasis)\n- No network without opt-in; update checks disabled by default on first run.\n- SBOMs produced and shipped; cargo audit and osv-scanner in CI; weekly dep bumps.\n- Reproducible builds: cargo-dist with locked dependencies; provide SHA256 and sigstore/minisign signature files.\n- Code signing on platforms; hardened runtime on macOS; Windows EV cert.\n\n14) Testing deeper\n- Golden fixtures:\n  - Corpus of Markdown/HTML with deliberate edits (move, split, merge, synonym, punctuation tweaks); expected re-anchoring outputs with confidence thresholds.\n- Fuzzing:\n  - Parser fuzz; anchor fuzz with randomized edits; seed from public docs.\n- Unit/integration:\n  - ID stability under noop changes; range mapping across unicode grapheme changes; link migration from legacy syntaxes.\n- UI smoke tests:\n  - Navigator actions, copy link, open link, transclusion update behavior; cross-platform via Playwright+Tauri driver.\n\n15) Documentation and dev onboarding\n- Python docs:\n  - Getting started: pip install hyperscope; minimal snippet to index a folder and resolve a link.\n  - Recipes: integrate with MkDocs; build a Slack bot to unfurl hs links; Jupyter extension to transclude.\n- Core API:\n  - Rust docs and JSON-RPC schema with examples; example plugin repos in TypeScript and Rust.\n- Deep Links 101:\n  - Visual explainer of block GUIDs, re-anchoring flows, and what happens under different edit types.\n\n16) Adoption accelerators for developers\n- VS Code extension:\n  - Commands: Copy deep link; Open hs link; Show anchors; Decorations for stable IDs; Inline transclusion preview.\n- Obsidian plugin:\n  - Context menu: Copy deep link; Transclude block; Live update badge.\n- Browser extension:\n  - Register hs:// protocol; detect fallback params in https pages; button to \u201cOpen in Hyperscope.\u201d\n\n17) Python integration examples (short)\n- Slack/Discord unfurl:\n  - Bot extracts hs URL; calls Workspace.resolve; posts a snippet with title and highlighted quote; links back to open app.\n- Knowledge portal:\n  - Use Workspace.export_static nightly; site serves stable, highlightable anchors; internal users with app get \u201copen locally\u201d deep link.\n- Data pipelines:\n  - Use Python to pre-index docs generated by CI; emit a mapping report of changed anchors post-build.\n\n18) Roadmap tasks clarified for Python/middleware\n- Month 0\u20131:\n  - Define C-ABI layer and PyO3 wrapper; produce minimal pip wheels; Python quickstart docs.\n  - Workspace indexing, link create/resolve; sidecar mapping on.\n- Month 2\u20133:\n  - Static exporter JS; hs:// protocol handler; VS Code early extension; publish wheels for macOS/Linux/Windows.\n- Month 4\u20135:\n  - Plugin protocol v0 and example importers in TS; Django/FastAPI example repo; MkDocs plugin alpha.\n- Month 6:\n  - API freeze v1 for core JSON-RPC and Python; commit to semantic versioning and deprecation windows.\n\n19) KPIs expanded for developer adoption\n- Library:\n  - \u2265 70% of downloads via pip or npm (JS viewer) result in at least one successful link resolve in 7 days.\n  - 3+ embeddings (MkDocs/Sphinx/Slack bot) built by community in 60 days.\n- Stability:\n  - Link survival \u2265 95% on test corpus; median resolve < 30 ms; p95 < 120 ms.\n- Package health:\n  - Wheels available for 90%+ of common platforms; import time < 100 ms.\n\n20) Risks and mitigations (dev angle)\n- Python packaging complexity:\n  - Use maturin action and cibuildwheel; prebuild wheels; provide source-only fallback with clear error if Rust toolchain missing.\n- ABI stability:\n  - Keep Python API stable; hide experimental functions behind feature flags; document breaking changes with migration notes.\n- Re-anchoring false positives:\n  - Ship confidence signaling; API flag strict mode; one-click \u201cReport bad anchor\u201d to collect anonymized diffs.\n\n21) Open questions to finalize\n- Which minimum Python versions to support (3.9+ recommended)?\n- Should we embed the static export JS inline or load as a small external asset for caching?\n- Do we need a pure-Python fallback for environments where native builds are blocked, or is Rust-only acceptable for v1?\n\nIf helpful, I can draft:\n- The sidecar .hsids.json schema.\n- The JSON-RPC initialize and import_doc request/response examples.\n- A minimal Python quickstart snippet and a Slack unfurl bot example."
}