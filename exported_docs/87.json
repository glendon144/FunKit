{
  "id": 87,
  "title": "flask_server_clean",
  "body": "# modules/flask_server.py\nimport os\nimport sys\nimport json\nimport re\nimport base64\nimport mimetypes\nimport traceback\nfrom pathlib import Path\nfrom typing import Any, Dict, Iterable, List, Optional, Union\n\n# ---- Paths ---------------------------------------------------------------\n\n# Directory where JSON files are exported\nDATA_DIR = Path(__file__).parent.parent / \"exported_docs\"\nASSETS_DIR = DATA_DIR / \"assets\"  # optional: holds *.b64 files\n\n# ---- Utilities -----------------------------------------------------------\n\ndef _s(val: Any, fallback: str = \"\") -> str:\n    \"\"\"Coerce any value to string safely.\"\"\"\n    if val is None:\n        return fallback\n    try:\n        if isinstance(val, (str, int, float, bool)):\n            return str(val)\n        # JSON-ize lists/dicts to avoid errors in templates\n        if isinstance(val, (dict, list, tuple, set)):\n            return json.dumps(val, ensure_ascii=False)\n        if isinstance(val, bytes):\n            return f\"<{len(val)} bytes>\"\n        return str(val)\n    except Exception:\n        return fallback\n\ndef _load_json(path: Path) -> Optional[Union[dict, list]]:\n    \"\"\"Load JSON safely; return None on error.\"\"\"\n    try:\n        with path.open(encoding=\"utf-8\") as f:\n            return json.load(f)\n    except Exception as e:\n        print(f\"[flask_server] Skipping bad JSON: {path} ({e})\", file=sys.stderr)\n        return None\n\ndef _iter_docs() -> Iterable[Dict[str, Any]]:\n    \"\"\"\n    Yield doc dicts from either exported_docs/docs.json (list or single object)\n    or from individual exported_docs/<id>.json files.\n    \"\"\"\n    if not DATA_DIR.exists():\n        return []\n\n    docs_file = DATA_DIR / \"docs.json\"\n    items: List[Dict[str, Any]] = []\n\n    if docs_file.exists():\n        root = _load_json(docs_file)\n        if root is not None:\n            docs = root\n            if isinstance(docs, dict):\n                docs = [docs]\n            if isinstance(docs, list):\n                for doc in docs:\n                    if isinstance(doc, dict):\n                        items.append(doc)\n\n    # Also scan individual *.json files (excluding docs.json)\n    for file_path in sorted(DATA_DIR.glob(\"*.json\")):\n        if file_path.name == \"docs.json\":\n            continue\n        obj = _load_json(file_path)\n        if obj is None:\n            continue\n        doc_id = file_path.stem\n        if isinstance(obj, list):\n            doc = next((d for d in obj if _s(d.get(\"id\")) == doc_id), None)\n        elif isinstance(obj, dict):\n            doc = obj\n            doc.setdefault(\"id\", doc_id)\n        else:\n            doc = None\n        if isinstance(doc, dict):\n            items.append(doc)\n\n    return items\n\ndef _find_doc(doc_id: str) -> Optional[Dict[str, Any]]:\n    \"\"\"Return a single doc by id, from either id.json or docs.json.\"\"\"\n    if not DATA_DIR.exists():\n        return None\n\n    # Prefer per-file\n    file_path = DATA_DIR / f\"{doc_id}.json\"\n    if file_path.exists():\n        obj = _load_json(file_path)\n        if isinstance(obj, list):\n            return next((d for d in obj if _s(d.get(\"id\")) == doc_id), None)\n        if isinstance(obj, dict):\n            obj.setdefault(\"id\", doc_id)\n            return obj\n\n    # Fallback docs.json\n    docs_file = DATA_DIR / \"docs.json\"\n    if docs_file.exists():\n        root = _load_json(docs_file)\n        if isinstance(root, dict):\n            if _s(root.get(\"id\")) == doc_id:\n                return root\n        elif isinstance(root, list):\n            return next((d for d in root if _s(d.get(\"id\")) == doc_id), None)\n\n    return None\n\ndef _is_image_dict(d: Dict[str, Any]) -> bool:\n    \"\"\"Heuristically determine if dict looks like an image payload.\"\"\"\n    mime = _s(d.get(\"mime\"))\n    data_b64 = d.get(\"data_base64\")\n    file_ref = _s(d.get(\"file\"))\n    return (mime.startswith(\"image/\") and (isinstance(data_b64, str) or file_ref.endswith(\".b64\")))\n\ndef _collect_images(doc: Dict[str, Any]) -> List[Dict[str, Any]]:\n    \"\"\"\n    Normalize images from either:\n      - doc[\"images\"] = [{mime,data_base64,alt,caption}] or {mime,file,alt,caption}\n      - doc[\"attachments\"] (where item.get(\"kind\") == \"image\")\n    \"\"\"\n    imgs: List[Dict[str, Any]] = []\n\n    def add_img(d: Dict[str, Any]):\n        if not isinstance(d, dict):\n            return\n        if _is_image_dict(d):\n            imgs.append({\n                \"mime\": _s(d.get(\"mime\"), \"image/png\"),\n                \"data_base64\": d.get(\"data_base64\"),  # may be None if using file\n                \"file\": _s(d.get(\"file\")),\n                \"alt\": _s(d.get(\"alt\")),\n                \"caption\": _s(d.get(\"caption\")),\n            })\n\n    # From images[]\n    if isinstance(doc.get(\"images\"), list):\n        for it in doc[\"images\"]:\n            add_img(it)\n\n    # From attachments[] (kind == image)\n    if isinstance(doc.get(\"attachments\"), list):\n        for it in doc[\"attachments\"]:\n            if isinstance(it, dict) and _s(it.get(\"kind\")) == \"image\":\n                add_img(it)\n\n    return imgs\n\ndef _data_uri_or_asset(img: Dict[str, Any]) -> Optional[str]:\n    \"\"\"\n    Return an <img src=\"...\">-ready URL:\n     - If data_base64 present: return data URI \"data:<mime>;base64,<b64>\"\n     - If file present (e.g., assets/my.png.b64): return \"/asset/<filename>\"\n    \"\"\"\n    mime = _s(img.get(\"mime\"), \"image/png\")\n    b64 = img.get(\"data_base64\")\n    file_ref = _s(img.get(\"file\"))\n\n    if isinstance(b64, str) and b64.strip():\n        return f\"data:{mime};base64,{b64}\"\n\n    if file_ref:\n        # served by /asset/<filename>\n        return f\"/asset/{file_ref}\"\n\n    return None\n\ndef _guess_mime_from_filename(name: str) -> str:\n    # name may be something like foo.png.b64 \u2014 remove trailing .b64\n    if name.lower().endswith(\".b64\"):\n        name = name[:-4]\n    mt, _ = mimetypes.guess_type(name)\n    return mt or \"application/octet-stream\"\n\n# ---- Flask App -----------------------------------------------------------\n\ndef create_app():\n    try:\n        from flask import Flask, render_template_string, abort, Response\n    except ImportError:\n        print(\"Error: Flask is not installed. Run 'pip install flask'.\", file=sys.stderr)\n        sys.exit(1)\n\n    app = Flask(__name__)\n    app.config[\"TEMPLATES_AUTO_RELOAD\"] = True\n\n    # ---- Error handlers ----\n    @app.errorhandler(404)\n    def _e404(_e):\n        return (\n            \"\"\"<!doctype html><meta charset=\"utf-8\">\n            <title>Not found</title>\n            <h3>Not found</h3><p>The requested item was not found.</p>\n            <p><a href=\"/\">\u2190 Back to index</a></p>\"\"\",\n            404,\n            {\"Content-Type\": \"text/html; charset=utf-8\"},\n        )\n\n    @app.errorhandler(500)\n    def _e500(e):\n        print(\"[flask_server] 500:\", e, file=sys.stderr)\n        traceback.print_exc()\n        return (\n            \"\"\"<!doctype html><meta charset=\"utf-8\">\n            <title>Server error</title>\n            <h3>Internal Server Error</h3>\n            <p>Something went wrong rendering this page.</p>\n            <p><a href=\"/\">\u2190 Back to index</a></p>\"\"\",\n            500,\n            {\"Content-Type\": \"text/html; charset=utf-8\"},\n        )\n\n    @app.route(\"/health\")\n    def health():\n        exists = DATA_DIR.exists()\n        count = len(list(_iter_docs())) if exists else 0\n        assets = ASSETS_DIR.exists()\n        return {\n            \"status\": \"ok\",\n            \"exported_docs_exists\": exists,\n            \"doc_count\": count,\n            \"assets_exists\": assets,\n        }\n\n    @app.route(\"/\")\n    def index():\n        \"\"\"Index page: list docs with a short description.\"\"\"\n        items = []\n        note = \"\"\n        if not DATA_DIR.exists():\n            note = f\"(Directory not found: {DATA_DIR})\"\n\n        for doc in _iter_docs():\n            try:\n                doc_id = _s(doc.get(\"id\")) or None\n                if not doc_id:\n                    doc_id = _s(abs(hash(_s(doc.get(\"title\")))) % (10**9))\n                title = _s(doc.get(\"title\", f\"Document {doc_id}\"))\n                raw_desc = doc.get(\"description\")\n                if raw_desc is None:\n                    raw_desc = doc.get(\"body\", \"\")\n                desc = _s(raw_desc).replace(\"\\n\", \" \")[:80]\n                items.append({\"id\": doc_id, \"title\": title, \"desc\": desc})\n            except Exception as e:\n                print(f\"[flask_server] Skipping bad doc on index: {e}\", file=sys.stderr)\n\n        template = \"\"\"\n        <!doctype html>\n        <meta charset=\"utf-8\" />\n        <title>DemoKit Documents</title>\n        <style>\n          body { font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; margin: 24px; }\n          ul { line-height: 1.6; }\n          code { background: #f5f5f5; padding: 2px 4px; border-radius: 4px; }\n        </style>\n        <h1>DemoKit Documents</h1>\n        {% if note %}<p style=\"color:#a00;\">{{ note }}</p>{% endif %}\n        {% if items %}\n          <ul>\n          {% for item in items %}\n            <li><a href=\"/doc/{{ item.id }}\">{{ item.title }}</a> \u2014 {{ item.desc }}{% if item.desc %}\u2026{% endif %}</li>\n          {% endfor %}\n          </ul>\n        {% else %}\n          <p>No documents found in <code>{{ data_dir }}</code>.</p>\n        {% endif %}\n        \"\"\"\n        return render_template_string(template, items=items, data_dir=str(DATA_DIR), note=note)\n\n    @app.route(\"/doc/<doc_id>\")\n    def show_doc(doc_id):\n        \"\"\"Render a single document, including any images.\"\"\"\n        doc = _find_doc(_s(doc_id))\n        if not doc:\n            abort(404)\n\n        title = _s(doc.get(\"title\", f\"Document {doc_id}\"))\n        body = _s(doc.get(\"body\", \"\"))\n\n        # Convert markdown-style internal links [text](doc:123) \u2192 anchor\n        try:\n            body_html = re.sub(r\"\\[(.+?)\\]\\(doc:(\\d+)\\)\", r'<a href=\"/doc/\\2\">\\1</a>', body)\n        except Exception:\n            body_html = _s(body)\n\n        images = _collect_images(doc)\n        image_html_snippets: List[str] = []\n        for img in images:\n            try:\n                src = _data_uri_or_asset(img)\n                if not src:\n                    continue\n                alt = _s(img.get(\"alt\"))\n                caption = _s(img.get(\"caption\"))\n                snippet = f'''\n                  <figure class=\"img-figure\">\n                    <img src=\"{src}\" alt=\"{alt}\">\n                    {f\"<figcaption>{caption}</figcaption>\" if caption else \"\"}\n                  </figure>\n                '''\n                image_html_snippets.append(snippet)\n            except Exception as e:\n                print(f\"[flask_server] Bad image skipped: {e}\", file=sys.stderr)\n\n        template = \"\"\"\n        <!doctype html>\n        <meta charset=\"utf-8\" />\n        <title>{{ title }}</title>\n        <style>\n          body { font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; margin: 24px; }\n          .content { max-width: 900px; }\n          .img-figure { margin: 16px 0; }\n          .img-figure img { max-width: 100%; height: auto; display: block; border-radius: 8px; }\n          .img-figure figcaption { color: #555; font-size: 0.9rem; margin-top: 6px; }\n          pre, code { background: #f7f7f7; padding: 6px 8px; border-radius: 6px; overflow-x: auto; }\n          a { color: #0a58ca; text-decoration: none; }\n          a:hover { text-decoration: underline; }\n        </style>\n        <div class=\"content\">\n          <h2>{{ title }}</h2>\n          <div>{{ body_html|safe }}</div>\n          {% if image_html_snippets %}\n            <hr>\n            <h3>Images</h3>\n            {% for snip in image_html_snippets %}\n              {{ snip|safe }}\n            {% endfor %}\n          {% endif %}\n          <p><a href=\"/\">\u2190 Back to index</a></p>\n        </div>\n        \"\"\"\n        return render_template_string(\n            template,\n            title=title,\n            body_html=body_html,\n            image_html_snippets=image_html_snippets,\n        )\n\n    @app.route(\"/asset/<path:filename>\")\n    def serve_asset(filename: str):\n        \"\"\"\n        Serve Base64 files stored under exported_docs/assets as decoded bytes with proper MIME.\n        Expected file suffix: *.b64  (e.g., 'photo.png.b64')\n        \"\"\"\n        from flask import abort  # local import to avoid circular import in error handlers\n        if not ASSETS_DIR.exists():\n            abort(404)\n        file_path = (ASSETS_DIR / filename).resolve()\n        try:\n            # Security: ensure path stays under ASSETS_DIR\n            file_path.relative_to(ASSETS_DIR)\n        except Exception:\n            abort(404)\n        if not file_path.exists() or not file_path.is_file():\n            abort(404)\n\n        try:\n            b64_data = file_path.read_text(encoding=\"utf-8\")\n            raw = base64.b64decode(b64_data, validate=True)\n        except Exception as e:\n            print(f\"[flask_server] Failed to decode asset {file_path}: {e}\", file=sys.stderr)\n            abort(404)\n\n        mime = _guess_mime_from_filename(file_path.name)\n        return Response(raw, mimetype=mime)\n\n    return app\n\n# ---- Main ----------------------------------------------------------------\n\nif __name__ == \"__main__\":\n    # Read port from env so GUI can launch on a free port\n    debug = os.environ.get(\"FLASK_DEBUG\") == \"1\"\n    port = int(os.environ.get(\"PORT\", \"5050\"))\n    app = create_app()\n    app.run(host=\"127.0.0.1\", port=port, debug=debug)\n\n"
}