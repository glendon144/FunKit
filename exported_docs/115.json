{
  "id": 115,
  "title": "newpatch",
  "body": "diff --git a/modules/gui_tkinter.py b/modules/gui_tkinter.py\nindex de360b1c70086840f3bb52420ec88635c5d78e78..cb875c7895b1ebc3462111db4a74b1e527ef40bf 100644\n--- a/modules/gui_tkinter.py\n+++ b/modules/gui_tkinter.py\n@@ -1,100 +1,103 @@\n import os\n import threading\n import tkinter as tk\n-from tkinter import ttk, filedialog, simpledialog, messagebox\n+from tkinter import ttk, simpledialog, messagebox\n from pathlib import Path\n from PIL import ImageTk, Image\n-import subprocess\n-import sys\n import json\n import re\n import xml.etree.ElementTree as ET\n \n # === Tri-model integration imports ===\n from concurrent.futures import ThreadPoolExecutor\n-from tkinter import messagebox\n from modules.tri_pipeline import run_tri_pipeline\n from modules.ai_memory import get_memory, set_memory\n \n \n # FunKit modules\n-from modules import hypertext_parser, image_generator, document_store\n-from modules.renderer import render_binary_as_text\n+from modules import hypertext_parser, image_generator\n from modules.logger import Logger\n-from modules.directory_import import import_text_files_from_directory\n from modules.TreeView import open_tree_view\n+from modules.gui_actions import (\n+    import_doc,\n+    export_doc,\n+    save_binary_as_text,\n+    import_directory,\n+    open_opml_from_main,\n+    export_and_launch_server,\n+)\n \n SETTINGS_FILE = Path(\"funkit_settings.json\")\n \n \n class DemoKitGUI(tk.Tk):\n \n     def _on_image_clicked(self):\n         \"\"\"Image generation disabled here: viewing images is local-only.\n         Hook your OpenAI-powered generation here if/when you want it.\"\"\"\n         from tkinter import messagebox\n         messagebox.showinfo(\"Image\", \"Local image rendering is enabled. Generation is disabled in this build.\")\n     \"\"\"FunKit / DemoKit GUI with OPML auto-rendering in the document pane, TreeView integration, and utilities.\"\"\"\n \n     SIDEBAR_WIDTH = 320\n \n     def __init__(self, doc_store, processor):\n         super().__init__()\n         self.doc_store = doc_store\n         self.processor = processor\n         self.logger: Logger = getattr(processor, \"logger\", Logger())\n         self.current_doc_id: int | None = None\n         self.history: list[int] = []\n # idempotent;  safe to call each startup\n         # image state\n         self._last_pil_img: Image.Image | None = None\n         self._last_tk_img: ImageTk.PhotoImage | None = None\n         self._image_enlarged: bool = False\n \n         # ---- Settings ----\n         self.settings = self._load_settings()\n         self.opml_expand_depth: int = int(self.settings.get(\"opml_expand_depth\", 2))\n \n         self.title(\"Engelbart Journal \u2013 DemoKit\")\n         self.geometry(\"1200x800\")\n         self.columnconfigure(0, minsize=self.SIDEBAR_WIDTH, weight=0)\n         self.columnconfigure(1, weight=1)\n         self.rowconfigure(0, weight=1)\n \n         self._build_sidebar()\n         self._build_main_pane()\n         self._build_context_menu()\n \n         # --- Menubar ---\n         menubar = tk.Menu(self)\n         # File menu\n         filemenu = tk.Menu(menubar, tearoff=0)\n-        filemenu.add_command(label=\"Import\", command=self._import_doc)\n-        filemenu.add_command(label=\"Export Current\", command=self._export_doc)\n+        filemenu.add_command(label=\"Import\", command=lambda: import_doc(self))\n+        filemenu.add_command(label=\"Export Current\", command=lambda: export_doc(self))\n         filemenu.add_separator()\n-        filemenu.add_command(label=\"Export to Intraweb\", command=self.export_and_launch_server)\n+        filemenu.add_command(label=\"Export to Intraweb\", command=lambda: export_and_launch_server(self))\n         filemenu.add_separator()\n         filemenu.add_command(label=\"Quit\", command=self.destroy)\n         menubar.add_cascade(label=\"File\", menu=filemenu)\n \n         # View menu (adds TreeView entry + shortcut + depth)\n         viewmenu = tk.Menu(menubar, tearoff=0)\n         viewmenu.add_command(label=\"Document Tree\\tCtrl+T\", command=self.on_tree_button)\n         viewmenu.add_separator()\n         viewmenu.add_command(label=\"Set OPML Expand Depth\u2026\", command=self._set_opml_expand_depth)\n         menubar.add_cascade(label=\"View\", menu=viewmenu)\n \n         self.config(menu=menubar)\n         # AI menu\n         ai_menu = tk.Menu(menubar, tearoff=0)\n         ai_menu.add_command(label=\"ASK (Tri)\", command=self.ask_tri_action, accelerator=\"Ctrl+Shift+A\")\n         menubar.add_cascade(label=\"AI\", menu=ai_menu)\n \n         # Keyboard shortcut\n         self.bind(\"<Control-t>\", lambda e: self.on_tree_button())\n \n         self.bind_all(\"<Control-Shift-A>\", lambda e: self.ask_tri_action())\n \n         self._refresh_sidebar()\n         # Thread pool (keeps UI responsive during API calls)\n         self.executor = getattr(self, \"executor\", ThreadPoolExecutor(max_workers=2))\ndiff --git a/modules/gui_tkinter.py b/modules/gui_tkinter.py\nindex de360b1c70086840f3bb52420ec88635c5d78e78..cb875c7895b1ebc3462111db4a74b1e527ef40bf 100644\n--- a/modules/gui_tkinter.py\n+++ b/modules/gui_tkinter.py\n@@ -171,74 +174,74 @@ class DemoKitGUI(tk.Tk):\n     # ---------------- Main Pane ----------------\n \n     def _build_main_pane(self):\n         pane = tk.Frame(self)\n         pane.grid(row=0, column=1, sticky=\"nswe\", padx=4, pady=4)\n         pane.rowconfigure(0, weight=3)\n         pane.rowconfigure(1, weight=1)\n         pane.columnconfigure(0, weight=1)\n \n         self.text = tk.Text(pane, wrap=\"word\")\n         self.text.grid(row=0, column=0, sticky=\"nswe\")\n         self.text.tag_configure(\"link\", foreground=\"green\", underline=True)\n         self.text.bind(\"<Button-3>\", self._show_context_menu)\n         self.text.bind(\"<Delete>\", lambda e: self._on_delete_clicked())\n \n         self.img_label = tk.Label(pane)\n         self.img_label.grid(row=1, column=0, sticky=\"ew\", pady=(8, 0))\n         self.img_label.bind(\"<Button-1>\", lambda e: self._toggle_image())\n \n         btns = tk.Frame(pane)\n         btns.grid(row=2, column=0, sticky=\"we\", pady=(6, 0))\n         self.toolbar = btns   # <- expose the toolbar so plugins can attach buttons\n \n         acts = [\n             (\"TREE\", self.on_tree_button),\n-            (\"OPEN OPML\", self._open_opml_from_main),\n+            (\"OPEN OPML\", lambda: open_opml_from_main(self)),\n             (\"ASK\", self._handle_ask),\n             (\"ASK (Tri)\", self.ask_tri_action),\n             (\"BACK\", self._go_back),\n             (\"DELETE\", self._on_delete_clicked),\n             (\"IMAGE\", self._handle_image),\n-            (\"FLASK\", self.export_and_launch_server),\n-            (\"DIR IMPORT\", self._import_directory),\n-            (\"SAVE AS TEXT\", self._save_binary_as_text),\n+            (\"FLASK\", lambda: export_and_launch_server(self)),\n+            (\"DIR IMPORT\", lambda: import_directory(self)),\n+            (\"SAVE AS TEXT\", lambda: save_binary_as_text(self)),\n         ]\n         for i, (lbl, cmd) in enumerate(acts):\n             ttk.Button(btns, text=lbl, command=cmd).grid(row=0, column=i, sticky=\"we\", padx=(0, 4))\n \n     # ---------------- Context Menu ----------------\n \n     def _build_context_menu(self):\n         self.context_menu = tk.Menu(self, tearoff=0)\n         self.context_menu.add_command(label=\"ASK\", command=self._handle_ask)\n         self.context_menu.add_command(label=\"ASK (Tri)\", command=self.ask_tri_action)\n         self.context_menu.add_command(label=\"Delete\", command=self._on_delete_clicked)\n         self.context_menu.add_separator()\n-        self.context_menu.add_command(label=\"Import\", command=self._import_doc)\n-        self.context_menu.add_command(label=\"Export\", command=self._export_doc)\n-        self.context_menu.add_command(label=\"Save Binary As Text\", command=self._save_binary_as_text)\n+        self.context_menu.add_command(label=\"Import\", command=lambda: import_doc(self))\n+        self.context_menu.add_command(label=\"Export\", command=lambda: export_doc(self))\n+        self.context_menu.add_command(label=\"Save Binary As Text\", command=lambda: save_binary_as_text(self))\n \n     def _show_context_menu(self, event):\n         try:\n             self.context_menu.tk_popup(event.x_root, event.y_root)\n         finally:\n             self.context_menu.grab_release()\n \n     # ---------------- ASK / BACK ----------------\n \n     def _handle_ask(self):\n         try:\n             start = self.text.index(tk.SEL_FIRST)\n             end = self.text.index(tk.SEL_LAST)\n             selected_text = self.text.get(start, end)\n         except tk.TclError:\n             messagebox.showwarning(\"ASK\", \"Please select some text first.\")\n             return\n \n         cid = self.current_doc_id\n \n         def on_success(nid):\n             messagebox.showinfo(\"ASK\", f\"Created new document {nid}.\")\n             self._refresh_sidebar()\n             # replace selection with link\n             self.text.delete(start, end)\ndiff --git a/modules/gui_tkinter.py b/modules/gui_tkinter.py\nindex de360b1c70086840f3bb52420ec88635c5d78e78..cb875c7895b1ebc3462111db4a74b1e527ef40bf 100644\n--- a/modules/gui_tkinter.py\n+++ b/modules/gui_tkinter.py\n@@ -649,277 +652,95 @@ class DemoKitGUI(tk.Tk):\n \n     def _toggle_image(self):\n         if not self._last_pil_img:\n             return\n         if not self._image_enlarged:\n             win = tk.Toplevel(self)\n             win.title(\"Image Preview\")\n             sw, sh = self.winfo_screenwidth(), self.winfo_screenheight()\n             iw, ih = self._last_pil_img.size\n             win.geometry(f\"{min(iw, sw)}x{min(ih, sh)}\")\n             canvas = tk.Canvas(win)\n             hbar = ttk.Scrollbar(win, orient=\"horizontal\", command=canvas.xview)\n             vbar = ttk.Scrollbar(win, orient=\"vertical\", command=canvas.yview)\n             canvas.configure(xscrollcommand=hbar.set, yscrollcommand=vbar.set, scrollregion=(0, 0, iw, ih))\n             canvas.grid(row=0, column=0, sticky=\"nsew\")\n             hbar.grid(row=1, column=0, sticky=\"we\")\n             vbar.grid(row=0, column=1, sticky=\"ns\")\n             win.grid_rowconfigure(0, weight=1)\n             win.grid_columnconfigure(0, weight=1)\n             tk_img = ImageTk.PhotoImage(self._last_pil_img)\n             canvas.create_image(0, 0, anchor=\"nw\", image=tk_img)\n             canvas.image = tk_img\n             win.bind(\"<Button-1>\", lambda e: self._toggle_image())\n             self._image_enlarged = True\n         else:\n+            from tkinter import filedialog\n+\n             default = f\"document_{self.current_doc_id}.png\"\n             path = filedialog.asksaveasfilename(\n                 title=\"Save Image\",\n                 initialfile=default,\n                 defaultextension=\".png\",\n                 filetypes=[(\"PNG\", \"*.png\"), (\"All Files\", \"*.*\")],\n             )\n             if path:\n                 try:\n                     self._last_pil_img.save(path)\n                     messagebox.showinfo(\"Save Image\", f\"Image saved to:\\n{path}\")\n                 except Exception as e:\n                     messagebox.showerror(\"Save Image\", f\"Error saving image:{e}\")\n             self._image_enlarged = False\n \n     def _handle_image(self):\n         try:\n             start = self.text.index(tk.SEL_FIRST)\n             end = self.text.index(tk.SEL_LAST)\n             prompt = self.text.get(start, end).strip()\n         except tk.TclError:\n             messagebox.showwarning(\"IMAGE\", \"Please select some text first.\")\n             return\n \n         def wrk():\n             try:\n                 pil = image_generator.generate_image(prompt)\n                 self._last_pil_img = pil\n                 thumb = pil.copy()\n                 thumb.thumbnail((800, 400))\n                 self._last_tk_img = ImageTk.PhotoImage(thumb)\n                 self._image_enlarged = False\n                 self.after(0, lambda: self.img_label.configure(image=self._last_tk_img))\n             except Exception as e:\n                 err = str(e)  # capture inside the except scope\n                 self.after(0, lambda err=err: messagebox.showerror(\"Image Error\", err))\n \n         threading.Thread(target=wrk, daemon=True).start()\n \n     # ---------------- Import/Export ----------------\n \n-    def _import_doc(self):\n-        path = filedialog.askopenfilename(title=\"Import\", filetypes=[(\"Text\", \"*.txt\"), (\"All\", \"*.*\")])\n-        if not path:\n-            return\n-        body = Path(path).read_text(encoding=\"utf-8\")\n-        title = Path(path).stem\n-        nid = self.doc_store.add_document(title, body)\n-        self.logger.info(f\"Imported {nid}\")\n-        self._refresh_sidebar()\n-        doc = self.doc_store.get_document(nid)\n-        if doc:\n-            self._render_document(doc)\n-\n-    def _export_doc(self):\n-        \"\"\"Robust export: picks sensible default extension, writes bytes for binary and text for text.\"\"\"\n-        from tkinter import filedialog, messagebox\n-        from pathlib import Path\n-\n-        if getattr(self, \"current_doc_id\", None) is None:\n-            messagebox.showwarning(\"Export\", \"No document selected.\")\n-            return\n-\n-        # Fetch and normalize\n-        doc = self.doc_store.get_document(self.current_doc_id)\n-        if hasattr(doc, \"keys\"):  # sqlite3.Row-like\n-            title = doc[\"title\"] if \"title\" in doc.keys() else \"Document\"\n-            body = doc[\"body\"] if \"body\" in doc.keys() else \"\"\n-        elif isinstance(doc, dict):\n-            title = doc.get(\"title\") or \"Document\"\n-            body = doc.get(\"body\") or \"\"\n-        else:  # tuple/list row: (id, title, body, ...)\n-            title = doc[1] if len(doc) > 1 else \"Document\"\n-            body = doc[2] if len(doc) > 2 else \"\"\n-\n-        # Infer extension/filetypes\n-        ext = \".txt\"\n-        filetypes = [(\"Text\", \"*.txt\"), (\"All files\", \"*.*\")]\n-        if isinstance(body, (bytes, bytearray)):\n-            b = bytes(body)\n-            if b.startswith(b\"\\x89PNG\\r\\n\\x1a\\n\"):\n-                ext, filetypes = \".png\", [(\"PNG image\", \"*.png\"), (\"All files\", \"*.*\")]\n-            elif b.startswith(b\"\\xff\\xd8\\xff\"):\n-                ext, filetypes = \".jpg\", [(\"JPEG image\", \"*.jpg;*.jpeg\"), (\"All files\", \"*.*\")]\n-            elif b[:6] in (b\"GIF87a\", b\"GIF89a\"):\n-                ext, filetypes = \".gif\", [(\"GIF image\", \"*.gif\"), (\"All files\", \"*.*\")]\n-            elif b.startswith(b\"%PDF-\"):\n-                ext, filetypes = \".pdf\", [(\"PDF\", \"*.pdf\"), (\"All files\", \"*.*\")]\n-            elif b[:4] == b\"RIFF\" and b[8:12] == b\"WEBP\":\n-                ext, filetypes = \".webp\", [(\"WebP\", \"*.webp\"), (\"All files\", \"*.*\")]\n-            else:\n-                try:\n-                    b.decode(\"utf-8\")\n-                    ext, filetypes = \".txt\", [(\"Text\", \"*.txt\"), (\"All files\", \"*.*\")]\n-                except Exception:\n-                    ext, filetypes = \".bin\", [(\"Binary\", \"*.bin\"), (\"All files\", \"*.*\")]\n-        else:\n-            s = (body or \"\").lstrip()\n-            low = s.lower()\n-            if low.startswith(\"<opml\"):\n-                ext, filetypes = \".opml\", [(\"OPML\", \"*.opml\"), (\"XML\", \"*.xml\"), (\"All files\", \"*.*\")]\n-            elif low.startswith(\"<html\") or (\"<body\" in low) or (\"<div\" in low):\n-                ext, filetypes = \".html\", [(\"HTML\", \"*.html;*.htm\"), (\"All files\", \"*.*\")]\n-            elif low.startswith(\"<svg\"):\n-                ext, filetypes = \".svg\", [(\"SVG\", \"*.svg\"), (\"All files\", \"*.*\")]\n-            else:\n-                ext, filetypes = \".txt\", [(\"Text\", \"*.txt\"), (\"All files\", \"*.*\")]\n-\n-        # Ask destination\n-        safe = \"\".join(c if (c.isalnum() or c in \"._- \") else \"_\" for c in (title or \"Document\")).strip() or \"Document\"\n-        path = filedialog.asksaveasfilename(\n-            title=\"Export Document\",\n-            defaultextension=ext,\n-            initialfile=f\"{safe}{ext}\",\n-            filetypes=filetypes,\n-        )\n-        if not path:\n-            return\n-\n-        # Write\n-        try:\n-            Path(path).parent.mkdir(parents=True, exist_ok=True)\n-            if isinstance(body, (bytes, bytearray)) and ext not in (\".txt\", \".opml\", \".html\", \".svg\", \".xml\"):\n-                Path(path).write_bytes(bytes(body))\n-            else:\n-                if isinstance(body, (bytes, bytearray)):\n-                    # Convert bytes\u2192text if the user chose a texty extension\n-                    try:\n-                        text_out = body.decode(\"utf-8\")\n-                    except Exception:\n-                        try:\n-                            from modules.hypertext_parser import render_binary_as_text\n-                            text_out = render_binary_as_text(body, title or \"Document\")\n-                        except Exception:\n-                            text_out = body.decode(\"utf-8\", errors=\"replace\")\n-                    Path(path).write_text(text_out, encoding=\"utf-8\", newline=\"\\n\")\n-                else:\n-                    Path(path).write_text(body or \"\", encoding=\"utf-8\", newline=\"\\n\")\n-            messagebox.showinfo(\"Export\", f\"Saved:\\n{path}\")\n-        except Exception as e:\n-            messagebox.showerror(\"Export\", f\"Could not save:\\n{e}\")\n-\n-    def _import_directory(self):\n-        dir_path = filedialog.askdirectory(title=\"Select Folder to Import\")\n-        if not dir_path:\n-            return\n-        imported, skipped = import_text_files_from_directory(dir_path, self.doc_store)\n-        msg = f\"Imported {imported} file(s), skipped {skipped}.\"\n-        print(\"[INFO]\", msg)\n-        messagebox.showinfo(\"Directory Import\", msg)\n-        self._refresh_sidebar()\n-\n-    def export_and_launch_server(self):\n-        export_path = Path(\"exported_docs\")\n-        export_path.mkdir(exist_ok=True)\n-        for doc in self.doc_store.get_document_index():\n-            data = dict(self.doc_store.get_document(doc[\"id\"]))\n-            if data:\n-                data = sanitize_doc(data)\n-                with open(export_path / f\"{data['id']}.json\", \"w\", encoding=\"utf-8\") as f:\n-                    json.dump(data, f, indent=2)\n-\n-        def launch():\n-            fp = Path(\"modules\") / \"flask_server.py\"\n-            if fp.exists():\n-                subprocess.Popen([sys.executable, str(fp)])\n-\n-        threading.Thread(target=launch, daemon=True).start()\n-        messagebox.showinfo(\"Server Started\", \"Flask server launched at http://127.0.0.1:5050\")\n-\n-    def _save_binary_as_text(self):\n-        selected_item = self.sidebar.selection()\n-        if not selected_item:\n-            return\n-        doc_id_str = self.sidebar.item(selected_item, \"values\")[0]\n-        if not str(doc_id_str).isdigit():\n-            print(f\"Warning: selected text is not a valid integer '{doc_id_str}'\")\n-            return\n-        doc_id = int(doc_id_str)\n-        doc = self.doc_store.get_document(doc_id)\n-        if not doc or len(doc) < 3:\n-            return\n-        body = doc[2]\n-        if isinstance(body, bytes) or (\"\\x00\" in str(body)):\n-            print(\"Binary detected, converting to text using render_binary_as_text.\")\n-            body = render_binary_as_text(body)\n-            self.doc_store.update_document(doc_id, body)\n-            self._render_document(self.doc_store.get_document(doc_id))\n-        else:\n-            print(\"Document is already text. Skipping overwrite.\")\n-        content = self.processor.get_strings_content(doc_id)\n-        self.doc_store.update_document(doc_id, content)\n-        doc = self.doc_store.get_document(doc_id)\n-        self._render_document(doc)\n-\n     # ---------------- Open OPML (import) ----------------\n \n-    def _open_opml_from_main(self):\n-        path = filedialog.askopenfilename(\n-            title=\"Open OPML/XML\", filetypes=[(\"OPML / XML\", \"*.opml *.xml\"), (\"All files\", \"*.*\")]\n-        )\n-        if not path:\n-            return\n-        try:\n-            content = Path(path).read_text(encoding=\"utf-8\", errors=\"replace\")\n-        except Exception as e:\n-            messagebox.showerror(\"Open OPML\", f\"Failed to read file:\\n{e}\")\n-            return\n-        title = Path(path).stem\n-        try:\n-            new_id = self.doc_store.add_document(title, content)\n-        except Exception as e:\n-            messagebox.showerror(\"Open OPML\", f\"Failed to import OPML to DB:\\n{e}\")\n-            return\n-        self._refresh_sidebar()\n-        self.current_doc_id = new_id\n-        doc = self.doc_store.get_document(new_id)\n-        if doc:\n-            self._render_document(doc)\n-        if getattr(self, \"tree_win\", None) and self.tree_win.winfo_exists():\n-            try:\n-                self.tree_win.load_opml_file(path)\n-                self.tree_win.deiconify()\n-                self.tree_win.lift()\n-                self._apply_opml_expand_depth()\n-            except Exception:\n-                pass\n \n     # ---------------- Rendering ----------------\n \n \n \n     def _render_document(self, doc):\n         \"\"\"Render a document with content-type aware behavior (LOCAL ONLY for images).\n         - text/opml \u2192 outline in the text pane\n         - image/*   \u2192 inline via Pillow (no API calls)\n         - default   \u2192 text + green-link parsing\n         \"\"\"\n         import tkinter as tk\n \n         if isinstance(doc, dict):\n             body  = doc.get(\"body\")\n             ctype = (doc.get(\"content_type\") or \"\").lower()\n             title = doc.get(\"title\") or \"\"\n             doc_id = doc.get(\"id\")\n         else:\n             body  = doc[2] if len(doc) > 2 else \"\"\n             ctype = \"\"\n             title = doc[1] if len(doc) > 1 else \"\"\n             doc_id = doc[0] if len(doc) > 0 else None\n \n         # OPML\ndiff --git a/modules/gui_tkinter.py b/modules/gui_tkinter.py\nindex de360b1c70086840f3bb52420ec88635c5d78e78..cb875c7895b1ebc3462111db4a74b1e527ef40bf 100644\n--- a/modules/gui_tkinter.py\n+++ b/modules/gui_tkinter.py\n@@ -980,43 +801,26 @@ class DemoKitGUI(tk.Tk):\n             nid = int(vals[0])\n         except (ValueError, TypeError):\n             messagebox.showerror(\"Delete\", \"Invalid document ID.\")\n             return\n         if not messagebox.askyesno(\"Confirm Delete\", f\"Delete document ID {nid}?\"):\n             return\n         try:\n             self.doc_store.delete_document(nid)\n         except Exception as e:\n             messagebox.showerror(\"Delete\", f\"Failed to delete: {e}\")\n             return\n         # Clear UI\n         self._refresh_sidebar()\n         self.text.delete(\"1.0\", tk.END)\n         if hasattr(self, \"_opml_frame\") and self._opml_frame.winfo_exists():\n             self._opml_frame.grid_remove()\n         if hasattr(self, \"img_label\"):\n             self.img_label.configure(image=\"\")\n         self.current_doc_id = None\n         self._last_pil_img = None\n         self._last_tk_img = None\n         self._image_enlarged = False\n         messagebox.showinfo(\"Deleted\", f\"Document {nid} has been deleted.\")\n \n \n-def sanitize_doc(doc):\n-    \"\"\"\n-    Normalize doc['body'] only for textual content.\n-    Leave image/other binary bodies as bytes so the GUI can render them.\n-    \"\"\"\n-    if not isinstance(doc, dict):\n-        return doc\n-    body = doc.get(\"body\")\n-    ctype = (doc.get(\"content_type\") or \"\").lower()\n-    if isinstance(body, (bytes, bytearray)):\n-        if ctype.startswith(\"image/\") or ctype in (\"application/octet-stream\",):\n-            return doc\n-        try:\n-            doc[\"body\"] = body.decode(\"utf-8\")\n-        except UnicodeDecodeError:\n-            doc[\"body\"] = body.decode(\"latin-1\", errors=\"replace\")\n-    return doc\n \n\n"
}