{
  "id": 127,
  "title": "release_1_2_1",
  "body": "#!/usr/bin/env bash\nset -euo pipefail\n\nVERSION=\"1.2.1\"\nTAG=\"v${VERSION}\"\nDATE_UTC=\"$(date -u +'%Y-%m-%d')\"\n\ngit rev-parse --is-inside-work-tree >/dev/null 2>&1 || {\n  echo \"Not inside a git repository.\" >&2; exit 1;\n}\n\nCUR_BRANCH=\"$(git rev-parse --abbrev-ref HEAD)\"\necho \"==> Preparing release ${TAG} on branch ${CUR_BRANCH}\"\n\n# Fetch (ignore failures if no remote)\ngit fetch --all || true\n\n# Write/refresh VERSION\necho \"${VERSION}\" > VERSION\n\n# Build release notes safely\nNOTES=\"$(cat <<'EOF'\n\u2728 **FunKit / DemoKit \u2014 v1.2.1**\n\n\ud83c\udf10 **URL \u2192 OPML importer (async, resilient)**\n- Background fetch with timeouts, size caps, and content-type checks\n- **Quick** (\u224812s/\u2248600KB) and **Full** (\u224825s/\u22482.5MB) modes\n- **Cancelable** \u201cFetching URLs\u2026\u201d dialog\n- HTML \u2192 OPML via engine; **text fallback** if HTML parse fails\n- All **database writes on the main thread** (no SQLite thread errors)\n\n\ud83d\uddc2\ufe0f **SAFE Batch OPML**\n- Multi-select docs \u2192 **Create OPML copies**; originals are untouched\n- Optional header-link insertion (toggle in Preferences)\n\n\ud83e\udde9 **OPML rendering & recovery**\n- Embedded OPML tree view with caret expand/collapse\n- Fallback renderer for \u201cOPML-ish\u201d text\n- \u201cRepair current doc \u2192 OPML (overwrite)\u201d and **Batch: Repair selected OPML**\n\n\ud83e\uddf9 **Formatting fixes**\n- Fixed literal `\\n` \u2192 real newlines in headers\n- Title bar normalization (no more accumulating phase tags)\n\n\u2699\ufe0f **Preferences**\n- After Convert: **Open / Link / Open+Link**\n- Batch: **prepend header link** (optional)\n- Network/URL: **Quick vs Full** mode toggle\n\n\ud83d\udd12 **Stability**\n- Validation of OPML before save; trims leading noise\n- GUI remains responsive during network operations\n\nThanks for the great collaboration! \ud83d\ude80\nEOF\n)\"\n\n# Prepend to CHANGELOG.md (create if missing)\nif [[ -f CHANGELOG.md ]]; then\n  TMP_FILE=\"$(mktemp)\"\n  {\n    echo \"## ${TAG} \u2014 ${DATE_UTC}\"\n    echo\n    echo \"${NOTES}\"\n    echo\n    cat CHANGELOG.md\n  } > \"${TMP_FILE}\"\n  mv \"${TMP_FILE}\" CHANGELOG.md\nelse\n  {\n    echo \"# Changelog\"\n    echo\n    echo \"## ${TAG} \u2014 ${DATE_UTC}\"\n    echo\n    echo \"${NOTES}\"\n    echo\n  } > CHANGELOG.md\nfi\n\n# Stage files\ngit add VERSION CHANGELOG.md || true\n\n# Commit only if something actually changed\nif ! git diff --cached --quiet --exit-code; then\n  git commit -m \"Release ${TAG}: URL\u2192OPML (async + cancel), SAFE Batch, repairs, prefs, and robustness\"\n  echo \"==> Commit created.\"\nelse\n  echo \"==> No content changes to commit (VERSION/CHANGELOG already up-to-date).\"\nfi\n\n# Create/update annotated tag\nMSG_FILE=\"$(mktemp)\"\nprintf \"FunKit / DemoKit %s \u2014 %s\\n\\n%s\\n\" \"${TAG}\" \"${DATE_UTC}\" \"${NOTES}\" > \"${MSG_FILE}\"\n\nif git rev-parse \"${TAG}\" >/dev/null 2>&1; then\n  echo \"==> Tag ${TAG} exists; updating it.\"\n  git tag -d \"${TAG}\" >/dev/null 2>&1 || true\nfi\ngit tag -a \"${TAG}\" -F \"${MSG_FILE}\"\nrm -f \"${MSG_FILE}\"\n\n# Push branch and tag (ignore errors if remote missing)\ngit push origin \"${CUR_BRANCH}\" || true\ngit push --tags origin || true\n\necho \"==> Done. Pushed branch '${CUR_BRANCH}' and tag '${TAG}'.\"\necho \"    VERSION set to ${VERSION} and CHANGELOG.md updated.\"\n\n"
}