{
  "id": 50,
  "title": "build_snapshot",
  "body": "#!/usr/bin/env bash\nset -Eeuo pipefail\n\n# =============================================================================\n# FunKit Snapshot Build Script \u2014 Safe, non-recursive version\n#\n# What changed vs your previous script?\n# - Uses a temporary build directory outside the project tree (mktemp -d)\n#   so we never copy a directory into itself and cause infinite nesting.\n# - Explicit rsync excludes for common build/venv folders.\n# - Creates a venv in the temp area and builds there.\n# - Cleans up the temp area on exit.\n# =============================================================================\n\necho \"\ud83d\udce6 Starting FunKit Snapshot Build (safe mode)...\"\n\n# Snapshot destination (kept the same default)\nSNAPSHOT_DIR=\"${SNAPSHOT_DIR:-$HOME/funkit-snapshots}\"\n\n# Record the project root (where this script is run from)\nPROJECT_ROOT=\"${PROJECT_ROOT:-$(pwd)}\"\n\n# Create a temp build dir OUTSIDE the project tree to avoid recursion\nBUILD_DIR=\"$(mktemp -d \"${TMPDIR:-/tmp}/funkit_snapshot_build.XXXXXX\")\"\n\n# Ensure cleanup even on failure\ncleanup() {\n  if [[ -n \"${BUILD_DIR:-}\" && -d \"$BUILD_DIR\" ]]; then\n    rm -rf \"$BUILD_DIR\"\n  fi\n}\ntrap cleanup EXIT\n\n# Create snapshots directory\nmkdir -p \"$SNAPSHOT_DIR\"\n\n# Timestamped build name\nSNAPSHOT_NAME=\"${SNAPSHOT_NAME:-funkit-$(date +%Y%m%d-%H%M%S)}\"\n\necho \"\ud83d\udcc1 Project root : $PROJECT_ROOT\"\necho \"\ud83e\uddea Build dir    : $BUILD_DIR\"\necho \"\ud83d\uddc2  Snapshots    : $SNAPSHOT_DIR\"\necho \"\ud83c\udff7  Artifact     : $SNAPSHOT_NAME\"\n\n# -----------------------------------------------------------------------------\n# Step 1: Copy source into isolated workspace\n# -----------------------------------------------------------------------------\nmkdir -p \"$BUILD_DIR/src\"\necho \"\ud83d\udef0  Syncing source into temp workspace...\"\n\n# Exclude common noise and anything that could cause recursion\nrsync -a \\\n  --exclude='__pycache__' \\\n  --exclude='.git' \\\n  --exclude='.mypy_cache' \\\n  --exclude='.pytest_cache' \\\n  --exclude='.venv' \\\n  --exclude='venv' \\\n  --exclude='dist' \\\n  --exclude='build' \\\n  --exclude='*.spec' \\\n  \"$PROJECT_ROOT\"/ \"$BUILD_DIR/src/\"\n\n# -----------------------------------------------------------------------------\n# Step 2: Build in an isolated virtual environment\n# -----------------------------------------------------------------------------\ncd \"$BUILD_DIR/src\"\n\necho \"\ud83d\udc0d Creating virtualenv...\"\npython3 -m venv \"$BUILD_DIR/venv\"\n# shellcheck disable=SC1091\nsource \"$BUILD_DIR/venv/bin/activate\"\n\necho \"\ud83d\udcda Installing dependencies...\"\npython -m pip install --upgrade pip wheel\nif [[ -f requirements.txt ]]; then\n  python -m pip install -r requirements.txt\nfi\npython -m pip install pyinstaller\n\n# -----------------------------------------------------------------------------\n# Step 3: Build single-file executable\n# -----------------------------------------------------------------------------\necho \"\ud83d\udcc4 Building standalone FunKit binary...\"\n# If you want to embed the storage folder at runtime, add:\n#   --add-data \"storage:storage\"\npyinstaller main.py --onefile --clean --name \"$SNAPSHOT_NAME\"\n\n# -----------------------------------------------------------------------------\n# Step 4: Move artifact to snapshots dir\n# -----------------------------------------------------------------------------\necho \"\ud83d\udce6 Moving final binary to $SNAPSHOT_DIR/\"\nmv \"dist/$SNAPSHOT_NAME\" \"$SNAPSHOT_DIR/$SNAPSHOT_NAME.bin\"\n\necho \"\u2705 Snapshot complete: $SNAPSHOT_DIR/$SNAPSHOT_NAME.bin\"\n"
}