{
  "id": 101,
  "title": "h120-gui_tkinter",
  "body": "import os\nimport threading\nimport tkinter as tk\nfrom tkinter import ttk, filedialog, simpledialog, messagebox\nfrom pathlib import Path\nfrom PIL import ImageTk, Image\nimport subprocess\nimport sys\nimport json\nimport re\nimport xml.etree.ElementTree as ET\n\n# === Tri-model integration imports ===\nfrom concurrent.futures import ThreadPoolExecutor\nfrom tkinter import messagebox\nfrom modules.tri_pipeline import run_tri_pipeline\nfrom modules.ai_memory import get_memory, set_memory\nfrom modules.memory_dialog import open_memory_dialog\n\n\n# FunKit modules\nfrom modules import hypertext_parser, image_generator, document_store\nfrom modules.renderer import render_binary_as_text\nfrom modules.logger import Logger\nfrom modules.directory_import import import_text_files_from_directory\nfrom modules.TreeView import open_tree_view\n\nSETTINGS_FILE = Path(\"funkit_settings.json\")\n\n\nclass DemoKitGUI(tk.Tk):\n    def _on_search_changed(self):\n        # debounce so we don\u2019t hammer the DB while typing\n        if self._search_after_id:\n            self.root.after_cancel(self._search_after_id)\n            self._search_after_id = self.root.after(200, self._apply_search)\n\n    def _apply_search(self):\n        q = (self._search_var.get() or \"\").strip()\n        if not q or q == \"title or text\u2026\":\n            # empty \u2192 show full tree\n            self.refresh_index()\n            return\n        self.filter_index(q)\n \n    def _on_image_clicked(self):\n        \"\"\"Image generation disabled here: viewing images is local-only.\n        Hook your OpenAI-powered generation here if/when you want it.\"\"\"\n        from tkinter import messagebox\n        messagebox.showinfo(\"Image\", \"Local image rendering is enabled. Generation is disabled in this build.\")\n    \"\"\"FunKit / DemoKit GUI with OPML auto-rendering in the document pane, TreeView integration, and utilities.\"\"\"\n\n    SIDEBAR_WIDTH = 320\n\n    def __init__(self, doc_store, processor):\n        super().__init__()\n        self.doc_store = doc_store\n        self.processor = processor\n        self.logger: Logger = getattr(processor, \"logger\", Logger())\n        self.current_doc_id: int | None = None\n        self.history: list[int] = []\n        self._suppress_sidebar_select = False  # prevent re-entrant selects\n# idempotent;  safe to call each startup\n        # image state\n        self._last_pil_img: Image.Image | None = None\n        self._last_tk_img: ImageTk.PhotoImage | None = None\n        self._image_enlarged: bool = False\n\n        # ---- Settings ----\n        self.settings = self._load_settings()\n        self.opml_expand_depth: int = int(self.settings.get(\"opml_expand_depth\", 2))\n\n        self.title(\"Engelbart Journal \u2013 DemoKit\")\n        self.geometry(\"1200x800\")\n        self.columnconfigure(0, minsize=self.SIDEBAR_WIDTH, weight=0)\n        self.columnconfigure(1, weight=1)\n        self.rowconfigure(0, weight=1)\n\n        self._build_sidebar()\n        self._build_main_pane()\n        self._build_context_menu()\n\n        # --- Menubar ---\n        menubar = tk.Menu(self)\n        # --- Tools Menu --- \n        \n        toolsmenu = tk.Menu(menubar, tearoff=0)\n        toolsmenu.add_command(label=\"Memory\u2026\", command=lambda: open_memory_dialog(self))\n        menubar.add_cascade(label=\"Tools\", menu=toolsmenu)\n        # File menu\n        filemenu = tk.Menu(menubar, tearoff=0)\n        filemenu.add_command(label=\"Import\", command=self._import_doc)\n        filemenu.add_command(label=\"Export Current\", command=self._export_doc)\n        filemenu.add_separator()\n        filemenu.add_command(label=\"Export to Intraweb\", command=self.export_and_launch_server)\n        filemenu.add_separator()\n        filemenu.add_command(label=\"Quit\", command=self.destroy)\n        menubar.add_cascade(label=\"File\", menu=filemenu)\n        # ---- Search UI (toolbar) ----\n        self._search_var = tk.StringVar()\n        self._search_after_id = None\n\n        search_lbl = ttk.Label(self.toolbar, text=\"Search:\")\n        search_lbl.pack(side=\"left\", padx=(6,2))\n\n        self._search_entry = ttk.Entry(self.toolbar, textvariable=self._search_var, width=28)\n        self._search_entry.pack(side=\"left\", padx=(0,6))\n        self._search_entry.insert(0, \"title or text\u2026\")\n        self._search_entry.bind(\"<FocusIn>\", lambda e: _clear_placeholder())\n        self._search_entry.bind(\"<KeyRelease>\", lambda e: self._on_search_changed())\n\ndef _clear_placeholder():\n    if self._search_entry.get() == \"title or text\u2026\":\n        self._search_entry.delete(0, \"end\")\n\n\n        # View menu (adds TreeView entry + shortcut + depth)\n        viewmenu = tk.Menu(menubar, tearoff=0)\n        viewmenu.add_command(label=\"Document Tree\\tCtrl+T\", command=self.on_tree_button)\n        viewmenu.add_separator()\n"
}