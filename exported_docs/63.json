{
  "id": 63,
  "title": "commit_opml",
  "body": "#!/usr/bin/env bash\nset -euo pipefail\n: \"${VERBOSE:=0}\"\n\nsay() { echo -e \"$@\"; }\nrun() { [ \"$VERBOSE\" = \"1\" ] && set -x; \"$@\"; [ \"$VERBOSE\" = \"1\" ] && set +x; }\n\nDEFAULT_TAG_PREFIX=\"opml_baseline\"\nFILES_TO_ADD=()\n\n# Never page inside scripts\nexport GIT_PAGER=\nexport PAGER=\n\ngit rev-parse --is-inside-work-tree >/dev/null 2>&1 || { say \"\u274c Not a git repo.\"; exit 1; }\n\nBRANCH=\"$(git rev-parse --abbrev-ref HEAD)\"\nHAVE_ORIGIN=1; git remote get-url origin >/dev/null 2>&1 || HAVE_ORIGIN=0\n\nsay \"\ud83d\udce6 Branch: $BRANCH\"\nsay \"\ud83c\udf10 Remote 'origin': $([ $HAVE_ORIGIN -eq 1 ] && echo 'present' || echo 'missing')\"\n\n# Stage\nif [ ${#FILES_TO_ADD[@]} -eq 0 ]; then\n  say \"\u2795 Staging all changes (git add -A)\u2026\"\n  run git add -A\nelse\n  say \"\u2795 Staging specific paths: ${FILES_TO_ADD[*]}\"\n  run git add \"${FILES_TO_ADD[@]}\"\nfi\n\nsay \"\ud83e\uddfe Staged diff (stat):\"\ngit --no-pager diff --cached --stat || true\nsay \"\ud83e\uddfe Status (short):\"\ngit --no-pager status -s || true\n\n# Nothing staged?\nif git diff --cached --quiet; then\n  say \"\u2139\ufe0f  No staged changes. Nothing to commit.\"\n  exit 0\nfi\n\nNOW_ISO=\"$(date -Iseconds)\"\nCOMMIT_MSG=\"$(cat <<'EOF'\n\u2728 OPML Rendering & TreeView lineage milestone\n\n- Automatic OPML detection and rendering in the document pane.\n- Integrated OPML parsing directly into _render_document (BOM-safe).\n- Fixed geometry manager conflict (grid vs pack) in OPML view.\n- Restored toolbar handlers (e.g., _on_delete_clicked, _handle_image).\n- TreeView lineage displays correctly from green links.\n- OPML tree depth preference persists until changed by user.\n\nTagging this as the first stable OPML-capable build of FunKit.\nEOF\n)\"\nCOMMIT_MSG+=\"\n\nCommitted at: $NOW_ISO\nBranch: $BRANCH\n\"\n\nsay \"\ud83d\udcdd Committing\u2026\"\nrun git commit -m \"$COMMIT_MSG\"\n\nTAG_BASE=\"${DEFAULT_TAG_PREFIX}_$(date +%Y%m%d_%H%M)\"\nTAG=\"$TAG_BASE\"; i=2\nwhile git rev-parse -q --verify \"refs/tags/$TAG\" >/dev/null; do\n  TAG=\"${TAG_BASE}_$i\"; i=$((i+1))\ndone\n\nsay \"\ud83d\udd16 Tagging: $TAG\"\nrun git tag -a \"$TAG\" -m \"Snapshot: $TAG\"\n\nif [ $HAVE_ORIGIN -eq 1 ]; then\n  if git rev-parse --abbrev-ref --symbolic-full-name @{u} >/dev/null 2>&1; then\n    say \"\ud83d\ude80 Pushing branch to origin\u2026\"\n    run git push\n  else\n    say \"\ud83d\ude80 First push for $BRANCH (setting upstream)\u2026\"\n    run git push --set-upstream origin \"$BRANCH\"\n  fi\n  say \"\ud83d\ude80 Pushing tag $TAG\u2026\"\n  run git push origin \"$TAG\"\n  say \"\u2705 Done. Branch: $BRANCH, Tag: $TAG\"\nelse\n  say \"\u26a0\ufe0f  No remote. Commit and tag are local.\n   To push:\n     git remote add origin <URL>\n     git push --set-upstream origin $BRANCH\n     git push origin $TAG\"\nfi\n\n"
}