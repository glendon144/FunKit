{
  "id": 81,
  "title": "ds-memory_dialog",
  "body": "import tkinter as tk\nfrom tkinter import ttk, messagebox\nimport sqlite3\nimport json\nimport os\n\n# Sanitization functions placeholder - replace with actual implementations\ndef sanitize_json_to_plain(data, options):\n    \"\"\"Converts JSON to sanitized plain text (placeholder)\"\"\"\n    return json.dumps(data, indent=2)\n\ndef get_funkit_sanitize_options():\n    \"\"\"Returns sanitization options (placeholder)\"\"\"\n    return {}\n\nclass MemoryEditor:\n    def __init__(self, app):\n        self.app = app\n        self.win = tk.Toplevel(app)\n        self.win.title(\"AI Memory\")\n        self.win.geometry(\"840x640\")\n        \n        self.db_path = self.app.get_path(\"memory.db\")\n        self._setup_widgets()\n        self._load_memory()\n\n    def _get_conn(self):\n        \"\"\"Create/maintain database connection\"\"\"\n        conn = sqlite3.connect(self.db_path)\n        conn.execute('''\n            CREATE TABLE IF NOT EXISTS memory (\n                key TEXT PRIMARY KEY,\n                content TEXT NOT NULL,\n                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n            )\n        ''')\n        return conn\n\n    def _setup_widgets(self):\n        # [...] (unchanged UI setup code from original)\n        # Same as in your original code, no changes needed\n\n    def _get_current_key(self):\n        \"\"\"Determine current memory scope key\"\"\"\n        return f\"doc:{self.app.current_doc_id}\" if self.mode_var.get() == \"doc\" else \"global\"\n\n    def _load_memory(self):\n        \"\"\"Load memory data from database\"\"\"\n        conn = self._get_conn()\n        key = self._get_current_key()\n        try:\n            cursor = conn.execute(\"SELECT content FROM memory WHERE key = ?\", (key,))\n            row = cursor.fetchone()\n            memory = json.loads(row[0]) if row else {}\n            self.editor.delete(\"1.0\", \"end\")\n            self.editor.insert(\"1.0\", json.dumps(memory, indent=2, ensure_ascii=False))\n            self.status_var.set(f\"Loaded: {key}\")\n        except Exception as e:\n            messagebox.showerror(\"Error\", f\"Failed to load memory: {str(e)}\")\n        finally:\n            conn.close()\n\n    def _save_memory(self):\n        \"\"\"Save memory data to database\"\"\"\n        conn = self._get_conn()\n        key = self._get_current_key()\n        try:\n            data = json.loads(self.editor.get(\"1.0\", \"end\"))\n            content = json.dumps(data)\n            conn.execute('''\n                INSERT OR REPLACE INTO memory (key, content, updated_at)\n                VALUES (?, ?, CURRENT_TIMESTAMP)\n            ''', (key, content))\n            conn.commit()\n            self.status_var.set(f\"Saved: {key}\")\n        except json.JSONDecodeError:\n            messagebox.showerror(\"Error\", \"Invalid JSON format\")\n        except Exception as e:\n            messagebox.showerror(\"Error\", f\"Save failed: {str(e)}\")\n        finally:\n            conn.close()\n\n    # [...] (other methods same as original - _clear_memory, _apply_preset, \n    #        _get_model_text, _preview_model_text, _copy_model_text)\n\n# Integration point\ndef open_memory_dialog(app):\n    MemoryEditor(app)\n"
}