{
  "id": 58,
  "title": "commands",
  "body": "import importlib.util\nimport os\n\nclass CommandProcessor:\n    def __init__(self, doc_store, event_logger):\n        self.doc_store = doc_store\n        self.event_logger = event_logger\n        self.commands = {}\n        self.help_texts = {}\n        self.context = {}\n\n        self.register_builtin_commands()\n        self.load_plugins()\n\n    def register_command(self, name, func, help=\"No help available.\"):\n        self.commands[name.upper()] = func\n        self.help_texts[name.upper()] = help\n\n    def process(self, input_line):\n        if not input_line.strip():\n            return\n        parts = input_line.split(maxsplit=1)\n        cmd = parts[0].upper()\n        args = parts[1] if len(parts) > 1 else \"\"\n        if cmd in self.commands:\n            self.commands[cmd](args, self.context)\n        else:\n            print(\"Unknown command:\", cmd)\n            self.show_help()\n\n    def show_help(self):\n        print(\"\\nAvailable commands:\")\n        for name, help in sorted(self.help_texts.items()):\n            print(f\"  {name}: {help}\")\n\n    def register_builtin_commands(self):\n        self.register_command(\"HELP\", lambda a, c: self.show_help(), help=\"Show this help message.\")\n        self.register_command(\"LIST\", self.cmd_list, help=\"List all documents.\")\n        self.register_command(\"NEW\", self.cmd_new, help=\"Create a new document.\")\n        self.register_command(\"EDIT\", self.cmd_edit, help=\"Append text to a document.\")\n        self.register_command(\"VIEW\", self.cmd_view, help=\"View a document.\")\n        # ... other built-ins as before ...\n\n    def load_plugins(self):\n        plugins_dir = \"plugins\"\n        if not os.path.isdir(plugins_dir):\n            os.makedirs(plugins_dir)\n        for fname in os.listdir(plugins_dir):\n            if fname.endswith(\".py\"):\n                fpath = os.path.join(plugins_dir, fname)\n                spec = importlib.util.spec_from_file_location(fname[:-3], fpath)\n                plugin = importlib.util.module_from_spec(spec)\n                try:\n                    spec.loader.exec_module(plugin)\n                    if hasattr(plugin, \"register\"):\n                        plugin.register(self.register_command)\n                        print(f\"Loaded plugin: {fname}\")\n                except Exception as e:\n                    print(f\"Failed to load plugin {fname}: {e}\")\n\n    # Built-in command implementations (simplified for space)\n    def cmd_list(self, args, context):\n        print(self.doc_store.list_documents())\n\n    def cmd_new(self, args, context):\n        doc_id = self.doc_store.new_document(args.strip() or \"Untitled\")\n        print(f\"Document {doc_id} created.\")\n\n    def cmd_edit(self, args, context):\n        parts = args.split(maxsplit=1)\n        if not parts:\n            print(\"Usage: EDIT <doc_id> <text>\")\n            return\n        doc_id = int(parts[0])\n        text = parts[1] if len(parts) > 1 else \"\"\n        doc = self.doc_store.get_document(doc_id)\n        if doc.empty:\n            print(\"Document not found.\")\n            return\n        body = str(doc.iloc[0].get(\"body\", \"\") or \"\")\n        new_body = body + \"\\n\" + text\n        self.doc_store.edit_document(doc_id, new_body)\n        print(f\"Document {doc_id} updated.\")\n\n    def cmd_view(self, args, context):\n        try:\n            doc_id = int(args)\n            doc = self.doc_store.get_document(doc_id)\n            if not doc.empty:\n                print(doc.iloc[0].get(\"body\", \"\"))\n            else:\n                print(\"Document not found.\")\n        except Exception:\n            print(\"Usage: VIEW <doc_id>\")\n\n"
}