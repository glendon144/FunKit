{
  "id": 65,
  "title": "deepseek-ai_interface",
  "body": "# ... existing imports ...\nimport json, typing as t, requests\n\n# ... existing code ...\n\nclass AIInterface:\n    def __init__(\n        self,\n        base_url: str | None = None,\n        api_key: str | None = None,\n        model: str | None = None,\n        timeout: float | None = None,\n        default_temperature: float | None = None,\n        max_tokens_default: int | None = None,\n    ):\n        # ... existing initialization ...\n        self._tool_functions: t.Dict[str, t.Callable[..., t.Any]] = {}\n        # ... rest of initialization ...\n\n    def register_tool(self, function_name: str, function: t.Callable[..., t.Any]) -> None:\n        \"\"\"Register a callable function for tool execution.\"\"\"\n        self._tool_functions[function_name] = function\n\n    def unregister_tool(self, function_name: str) -> None:\n        \"\"\"Remove a registered tool function.\"\"\"\n        if function_name in self._tool_functions:\n            del self._tool_functions[function_name]\n\n    def tool_fn(self, function_name: str, arguments: dict) -> str:\n        \"\"\"\n        Execute a registered tool function with arguments.\n        \n        Args:\n            function_name: Name of registered function\n            arguments: Keyword arguments for the function\n            \n        Returns:\n            String result (JSON-encoded if non-string)\n        \"\"\"\n        if function_name not in self._tool_functions:\n            raise ValueError(f\"Tool '{function_name}' not registered\")\n\n        try:\n            result = self._tool_functions[function_name](**arguments)\n        except Exception as e:\n            return f\"Error: {str(e)}\"\n        \n        if isinstance(result, str):\n            return result\n        try:\n            return json.dumps(result, ensure_ascii=False)\n        except TypeError:\n            return str(result)\n\n    # ... existing methods ...\n"
}